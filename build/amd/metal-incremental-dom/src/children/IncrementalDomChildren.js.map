{"version":3,"sources":["IncrementalDomChildren.js"],"names":["IncrementalDomChildren","renderer","callback","renderer_","callback_","tree_","config","children","currentParent_","isCapturing_","startInterception","elementClose","handleInterceptedCloseCall_","elementOpen","handleInterceptedOpenCall_","text","handleInterceptedTextCall_","tree","opt_skipNode","addChildToTree","isDef","args","IncrementalDOM","apply","buildCallFromConfig","tag","i","length","render","addChildCallToTree_","opt_isText","child","parent","CHILD_OWNER","buildConfigFromCall","isComponentTag","ref","isDefAndNotNull","buildRef","push","stopInterception","originalFn"],"mappings":"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","file":"node_modules/metal-incremental-dom/src/children/IncrementalDomChildren.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport IncrementalDomAop from '../IncrementalDomAop';\nimport IncrementalDomUtils from '../utils/IncrementalDomUtils';\n\n/**\n * Provides helpers for capturing children elements from incremental dom calls,\n * as well as actually rendering those captured children via incremental dom\n * later.\n */\nclass IncrementalDomChildren {\n\t/**\n\t * Captures all child elements from incremental dom calls.\n\t * @param {!IncrementalDomRenderer} renderer The renderer that is capturing\n\t *   children.\n\t * @param {!function} callback Function to be called when children have all\n\t *     been captured.\n \t */\n\tstatic capture(renderer, callback) {\n\t\trenderer_ = renderer;\n\t\tcallback_ = callback;\n\t\ttree_ = {\n\t\t\tconfig: {\n\t\t\t\tchildren: []\n\t\t\t}\n\t\t};\n\t\tcurrentParent_ = tree_;\n\t\tisCapturing_ = true;\n\t\tIncrementalDomAop.startInterception({\n\t\t\telementClose: handleInterceptedCloseCall_,\n\t\t\telementOpen: handleInterceptedOpenCall_,\n\t\t\ttext: handleInterceptedTextCall_\n\t\t});\n\t}\n\n\t/**\n\t * Renders a children tree through incremental dom.\n\t * @param {!{args: Array, !children: Array, isText: ?boolean}}\n\t * @param {function()=} opt_skipNode Optional function that is called for\n\t *     each node to be rendered. If it returns true, the node will be skipped.\n\t * @protected\n\t */\n\tstatic render(tree, opt_skipNode) {\n\t\tif (isCapturing_) {\n\t\t\t// If capturing, just add the node directly to the captured tree.\n\t\t\taddChildToTree(tree);\n\t\t\treturn;\n\t\t}\n\n\t\tif (opt_skipNode && opt_skipNode(tree)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (core.isDef(tree.text)) {\n\t\t\tlet args = tree.args ? tree.args : [];\n\t\t\targs[0] = tree.text;\n\t\t\tIncrementalDOM.text.apply(null, args);\n\t\t} else {\n\t\t\tlet args = IncrementalDomUtils.buildCallFromConfig(tree.tag, tree.config);\n\t\t\tIncrementalDOM.elementOpen.apply(null, args);\n\t\t\tif (tree.config.children) {\n\t\t\t\tfor (var i = 0; i < tree.config.children.length; i++) {\n\t\t\t\t\tIncrementalDomChildren.render(tree.config.children[i], opt_skipNode);\n\t\t\t\t}\n\t\t\t}\n\t\t\tIncrementalDOM.elementClose(tree.tag);\n\t\t}\n\t}\n}\n\nvar callback_;\nvar currentParent_;\nvar isCapturing_ = false;\nvar renderer_;\nvar tree_;\n\n/**\n * Adds a child element to the tree.\n * @param {!Array} args The arguments passed to the incremental dom call.\n * @param {boolean=} opt_isText Optional flag indicating if the child is a\n *     text element.\n * @protected\n */\nfunction addChildCallToTree_(args, opt_isText) {\n\tvar child = {\n\t\tparent: currentParent_,\n\t\t[IncrementalDomChildren.CHILD_OWNER]: renderer_\n\t};\n\n\tif (opt_isText) {\n\t\tchild.text = args[0];\n\t\tif (args.length > 1) {\n\t\t\tchild.args = args;\n\t\t}\n\t} else {\n\t\tchild.tag = args[0];\n\t\tchild.config = IncrementalDomUtils.buildConfigFromCall(args);\n\t\tif (IncrementalDomUtils.isComponentTag(child.tag)) {\n\t\t\tchild.config.ref = core.isDefAndNotNull(child.config.ref) ?\n\t\t\t\tchild.config.ref :\n\t\t\t\trenderer_.buildRef(args[0]);\n\t\t}\n\t\tchild.config.children = [];\n\t}\n\n\taddChildToTree(child);\n\treturn child;\n}\n\nfunction addChildToTree(child) {\n\tcurrentParent_.config.children.push(child);\n}\n\n/**\n * Handles an intercepted call to the `elementClose` function from incremental\n * dom.\n * @protected\n */\nfunction handleInterceptedCloseCall_() {\n\tif (currentParent_ === tree_) {\n\t\tIncrementalDomAop.stopInterception();\n\t\tisCapturing_ = false;\n\t\tcallback_(tree_);\n\t\tcallback_ = null;\n\t\tcurrentParent_ = null;\n\t\trenderer_ = null;\n\t\ttree_ = null;\n\t} else {\n\t\tcurrentParent_ = currentParent_.parent;\n\t}\n}\n\n/**\n * Handles an intercepted call to the `elementOpen` function from incremental\n * dom.\n * @param {!function()} originalFn The original function before interception.\n * @protected\n */\nfunction handleInterceptedOpenCall_(originalFn, ...args) {\n\tcurrentParent_ = addChildCallToTree_(args);\n}\n\n/**\n * Handles an intercepted call to the `text` function from incremental dom.\n * @param {!function()} originalFn The original function before interception.\n * @protected\n */\nfunction handleInterceptedTextCall_(originalFn, ...args) {\n\taddChildCallToTree_(args, true);\n}\n\n\n/**\n * Property identifying a specific object as a Metal.js child node, and\n * pointing to the renderer instance that created it.\n * @type {string}\n * @static\n */\nIncrementalDomChildren.CHILD_OWNER = '__metalChildOwner';\n\nexport default IncrementalDomChildren;\n"],"sourceRoot":"/source/"}
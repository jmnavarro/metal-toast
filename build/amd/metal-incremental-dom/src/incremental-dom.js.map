{"version":3,"sources":["incremental-dom.js"],"names":["global","factory","IncrementalDOM","window","exports","hasOwnProperty","Object","prototype","Blank","create","has","map","property","call","createMap","DATA_PROP","NodeData","nodeName","key","attrs","attrsArr","newAttrs","staticsApplied","keyMap","keyMapValid","focused","text","initData","node","data","getData","importNode","toLowerCase","isElement","Element","getAttribute","parentNode","attributes","i","length","attr","name","value","undefined","push","child","firstChild","nextSibling","getNamespaceForTag","tag","parent","namespaceURI","createElement","doc","namespace","el","createElementNS","createText","createTextNode","notifications","nodesCreated","nodesDeleted","Context","created","deleted","markCreated","markDeleted","notifyChanges","isDocumentRoot","Document","DocumentFragment","getAncestry","root","ancestry","cur","getRoot","prev","getActiveElement","activeElement","getFocusedPath","contains","moveBefore","referenceNode","insertReferenceNode","next","insertBefore","context","currentNode","currentParent","markFocused","focusPath","patchFactory","run","f","fn","prevContext","prevDoc","prevCurrentNode","prevCurrentParent","previousInAttributes","previousInSkip","ownerDocument","retVal","patchInner","enterNode","exitNode","patchOuter","startNode","expectedNextNode","expectedPrevNode","removeChild","matches","matchNode","alignWithDOM","parentData","currentNodeData","keyNode","replaceChild","clearUnvisitedDOM","lastChild","getNextNode","nextNode","coreElementOpen","coreElementClose","coreText","currentElement","currentPointer","skip","skipNode","symbols","default","getNamespace","lastIndexOf","applyAttr","removeAttribute","attrNS","setAttributeNS","setAttribute","applyProp","setStyleValue","style","prop","indexOf","setProperty","applyStyle","cssText","elStyle","obj","applyAttributeTyped","type","updateAttribute","mutator","ATTRIBUTES_OFFSET","argsBuilder","elementOpen","statics","var_args","_i","isNew","j","arguments","_attr","_attr2","elementOpenStart","elementOpenEnd","apply","elementClose","elementVoid","formatted","patch"],"mappings":"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","file":"node_modules/metal-incremental-dom/src/incremental-dom.js","sourcesContent":["/* jshint ignore:start */\n\n/**\n * @license\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function (global, factory) {\n  (factory((global.IncrementalDOM = global.IncrementalDOM || {})));\n}(window, function (exports) { 'use strict';\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /**\n   * A cached reference to the hasOwnProperty function.\n   */\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  /**\n   * A constructor function that will create blank objects.\n   * @constructor\n   */\n  function Blank() {}\n\n  Blank.prototype = Object.create(null);\n\n  /**\n   * Used to prevent property collisions between our \"map\" and its prototype.\n   * @param {!Object<string, *>} map The map to check.\n   * @param {string} property The property to check.\n   * @return {boolean} Whether map has property.\n   */\n  var has = function (map, property) {\n    return hasOwnProperty.call(map, property);\n  };\n\n  /**\n   * Creates an map object without a prototype.\n   * @return {!Object}\n   */\n  var createMap = function () {\n    return new Blank();\n  };\n\n  /**\n   * The property name where we store Incremental DOM data.\n   */\n  var DATA_PROP = '__incrementalDOMData';\n\n  /**\n   * Keeps track of information needed to perform diffs for a given DOM node.\n   * @param {!string} nodeName\n   * @param {?string=} key\n   * @constructor\n   */\n  function NodeData(nodeName, key) {\n    /**\n     * The attributes and their values.\n     * @const {!Object<string, *>}\n     */\n    this.attrs = createMap();\n\n    /**\n     * An array of attribute name/value pairs, used for quickly diffing the\n     * incomming attributes to see if the DOM node's attributes need to be\n     * updated.\n     * @const {Array<*>}\n     */\n    this.attrsArr = [];\n\n    /**\n     * The incoming attributes for this Node, before they are updated.\n     * @const {!Object<string, *>}\n     */\n    this.newAttrs = createMap();\n\n    /**\n     * Whether or not the statics have been applied for the node yet.\n     * {boolean}\n     */\n    this.staticsApplied = false;\n\n    /**\n     * The key used to identify this node, used to preserve DOM nodes when they\n     * move within their parent.\n     * @const\n     */\n    this.key = key;\n\n    /**\n     * Keeps track of children within this node by their key.\n     * {!Object<string, !Element>}\n     */\n    this.keyMap = createMap();\n\n    /**\n     * Whether or not the keyMap is currently valid.\n     * @type {boolean}\n     */\n    this.keyMapValid = true;\n\n    /**\n     * Whether or the associated node is, or contains, a focused Element.\n     * @type {boolean}\n     */\n    this.focused = false;\n\n    /**\n     * The node name for this node.\n     * @const {string}\n     */\n    this.nodeName = nodeName;\n\n    /**\n     * @type {?string}\n     */\n    this.text = null;\n  }\n\n  /**\n   * Initializes a NodeData object for a Node.\n   *\n   * @param {Node} node The node to initialize data for.\n   * @param {string} nodeName The node name of node.\n   * @param {?string=} key The key that identifies the node.\n   * @return {!NodeData} The newly initialized data object\n   */\n  var initData = function (node, nodeName, key) {\n    var data = new NodeData(nodeName, key);\n    node[DATA_PROP] = data;\n    return data;\n  };\n\n  /**\n   * Retrieves the NodeData object for a Node, creating it if necessary.\n   *\n   * @param {?Node} node The Node to retrieve the data for.\n   * @return {!NodeData} The NodeData for this Node.\n   */\n  var getData = function (node) {\n    importNode(node);\n    return node[DATA_PROP];\n  };\n\n  /**\n   * Imports node and its subtree, initializing caches.\n   *\n   * @param {?Node} node The Node to import.\n   */\n  var importNode = function (node) {\n    if (node[DATA_PROP]) {\n      return;\n    }\n\n    var nodeName = node.nodeName.toLowerCase();\n    var isElement = node instanceof Element;\n    var key = isElement ? node.getAttribute('key') : null;\n    var data = initData(node, nodeName, key);\n\n    if (key) {\n      getData(node.parentNode).keyMap[key] = node;\n    }\n\n    if (isElement) {\n      var attributes = node.attributes;\n      var attrs = data.attrs;\n      var newAttrs = data.newAttrs;\n      var attrsArr = data.attrsArr;\n\n      for (var i = 0; i < attributes.length; i += 1) {\n        var attr = attributes[i];\n        var name = attr.name;\n        var value = attr.value;\n\n        attrs[name] = value;\n        newAttrs[name] = undefined;\n        attrsArr.push(name);\n        attrsArr.push(value);\n      }\n    }\n\n    for (var child = node.firstChild; child; child = child.nextSibling) {\n      importNode(child);\n    }\n  };\n\n  /**\n   * Gets the namespace to create an element (of a given tag) in.\n   * @param {string} tag The tag to get the namespace for.\n   * @param {?Node} parent\n   * @return {?string} The namespace to create the tag in.\n   */\n  var getNamespaceForTag = function (tag, parent) {\n    if (tag === 'svg') {\n      return 'http://www.w3.org/2000/svg';\n    }\n\n    if (getData(parent).nodeName === 'foreignObject') {\n      return null;\n    }\n\n    return parent.namespaceURI;\n  };\n\n  /**\n   * Creates an Element.\n   * @param {Document} doc The document with which to create the Element.\n   * @param {?Node} parent\n   * @param {string} tag The tag for the Element.\n   * @param {?string=} key A key to identify the Element.\n   * @return {!Element}\n   */\n  var createElement = function (doc, parent, tag, key) {\n    var namespace = getNamespaceForTag(tag, parent);\n    var el = undefined;\n\n    if (namespace) {\n      el = doc.createElementNS(namespace, tag);\n    } else {\n      el = doc.createElement(tag);\n    }\n\n    initData(el, tag, key);\n\n    return el;\n  };\n\n  /**\n   * Creates a Text Node.\n   * @param {Document} doc The document with which to create the Element.\n   * @return {!Text}\n   */\n  var createText = function (doc) {\n    var node = doc.createTextNode('');\n    initData(node, '#text', null);\n    return node;\n  };\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /** @const */\n  var notifications = {\n    /**\n     * Called after patch has compleated with any Nodes that have been created\n     * and added to the DOM.\n     * @type {?function(Array<!Node>)}\n     */\n    nodesCreated: null,\n\n    /**\n     * Called after patch has compleated with any Nodes that have been removed\n     * from the DOM.\n     * Note it's an applications responsibility to handle any childNodes.\n     * @type {?function(Array<!Node>)}\n     */\n    nodesDeleted: null\n  };\n\n  /**\n   * Keeps track of the state of a patch.\n   * @constructor\n   */\n  function Context() {\n    /**\n     * @type {(Array<!Node>|undefined)}\n     */\n    this.created = notifications.nodesCreated && [];\n\n    /**\n     * @type {(Array<!Node>|undefined)}\n     */\n    this.deleted = notifications.nodesDeleted && [];\n  }\n\n  /**\n   * @param {!Node} node\n   */\n  Context.prototype.markCreated = function (node) {\n    if (this.created) {\n      this.created.push(node);\n    }\n  };\n\n  /**\n   * @param {!Node} node\n   */\n  Context.prototype.markDeleted = function (node) {\n    if (this.deleted) {\n      this.deleted.push(node);\n    }\n  };\n\n  /**\n   * Notifies about nodes that were created during the patch opearation.\n   */\n  Context.prototype.notifyChanges = function () {\n    if (this.created && this.created.length > 0) {\n      notifications.nodesCreated(this.created);\n    }\n\n    if (this.deleted && this.deleted.length > 0) {\n      notifications.nodesDeleted(this.deleted);\n    }\n  };\n\n  /**\n   * Copyright 2016 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /**\n   * @param {!Node} node\n   * @return {boolean} True if the node the root of a document, false otherwise.\n   */\n  var isDocumentRoot = function (node) {\n    // For ShadowRoots, check if they are a DocumentFragment instead of if they\n    // are a ShadowRoot so that this can work in 'use strict' if ShadowRoots are\n    // not supported.\n    return node instanceof Document || node instanceof DocumentFragment;\n  };\n\n  /**\n   * @param {!Node} node The node to start at, inclusive.\n   * @param {?Node} root The root ancestor to get until, exclusive.\n   * @return {!Array<!Node>} The ancestry of DOM nodes.\n   */\n  var getAncestry = function (node, root) {\n    var ancestry = [];\n    var cur = node;\n\n    while (cur !== root) {\n      ancestry.push(cur);\n      cur = cur.parentNode;\n    }\n\n    return ancestry;\n  };\n\n  /**\n   * @param {!Node} node\n   * @return {!Node} The root node of the DOM tree that contains node.\n   */\n  var getRoot = function (node) {\n    var cur = node;\n    var prev = cur;\n\n    while (cur) {\n      prev = cur;\n      cur = cur.parentNode;\n    }\n\n    return prev;\n  };\n\n  /**\n   * @param {!Node} node The node to get the activeElement for.\n   * @return {?Element} The activeElement in the Document or ShadowRoot\n   *     corresponding to node, if present.\n   */\n  var getActiveElement = function (node) {\n    var root = getRoot(node);\n    return isDocumentRoot(root) ? root.activeElement : null;\n  };\n\n  /**\n   * Gets the path of nodes that contain the focused node in the same document as\n   * a reference node, up until the root.\n   * @param {!Node} node The reference node to get the activeElement for.\n   * @param {?Node} root The root to get the focused path until.\n   * @return {!Array<Node>}\n   */\n  var getFocusedPath = function (node, root) {\n    var activeElement = getActiveElement(node);\n\n    if (!activeElement || !node.contains(activeElement)) {\n      return [];\n    }\n\n    return getAncestry(activeElement, root);\n  };\n\n  /**\n   * Like insertBefore, but instead instead of moving the desired node, instead\n   * moves all the other nodes after.\n   * @param {?Node} parentNode\n   * @param {!Node} node\n   * @param {?Node} referenceNode\n   */\n  var moveBefore = function (parentNode, node, referenceNode) {\n    var insertReferenceNode = node.nextSibling;\n    var cur = referenceNode;\n\n    while (cur !== node) {\n      var next = cur.nextSibling;\n      parentNode.insertBefore(cur, insertReferenceNode);\n      cur = next;\n    }\n  };\n\n  /** @type {?Context} */\n  var context = null;\n\n  /** @type {?Node} */\n  var currentNode = null;\n\n  /** @type {?Node} */\n  var currentParent = null;\n\n  /** @type {?Document} */\n  var doc = null;\n\n  /**\n   * @param {!Array<Node>} focusPath The nodes to mark.\n   * @param {boolean} focused Whether or not they are focused.\n   */\n  var markFocused = function (focusPath, focused) {\n    for (var i = 0; i < focusPath.length; i += 1) {\n      getData(focusPath[i]).focused = focused;\n    }\n  };\n\n  /**\n   * Returns a patcher function that sets up and restores a patch context,\n   * running the run function with the provided data.\n   * @param {function((!Element|!DocumentFragment),!function(T),T=): ?Node} run\n   * @return {function((!Element|!DocumentFragment),!function(T),T=): ?Node}\n   * @template T\n   */\n  var patchFactory = function (run) {\n    /**\n     * TODO(moz): These annotations won't be necessary once we switch to Closure\n     * Compiler's new type inference. Remove these once the switch is done.\n     *\n     * @param {(!Element|!DocumentFragment)} node\n     * @param {!function(T)} fn\n     * @param {T=} data\n     * @return {?Node} node\n     * @template T\n     */\n    var f = function (node, fn, data) {\n      var prevContext = context;\n      var prevDoc = doc;\n      var prevCurrentNode = currentNode;\n      var prevCurrentParent = currentParent;\n      var previousInAttributes = false;\n      var previousInSkip = false;\n\n      context = new Context();\n      doc = node.ownerDocument;\n      currentParent = node.parentNode;\n\n      if ('production' !== 'production') {}\n\n      var focusPath = getFocusedPath(node, currentParent);\n      markFocused(focusPath, true);\n      var retVal = run(node, fn, data);\n      markFocused(focusPath, false);\n\n      if ('production' !== 'production') {}\n\n      context.notifyChanges();\n\n      context = prevContext;\n      doc = prevDoc;\n      currentNode = prevCurrentNode;\n      currentParent = prevCurrentParent;\n\n      return retVal;\n    };\n    return f;\n  };\n\n  /**\n   * Patches the document starting at node with the provided function. This\n   * function may be called during an existing patch operation.\n   * @param {!Element|!DocumentFragment} node The Element or Document\n   *     to patch.\n   * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n   *     calls that describe the DOM.\n   * @param {T=} data An argument passed to fn to represent DOM state.\n   * @return {!Node} The patched node.\n   * @template T\n   */\n  var patchInner = patchFactory(function (node, fn, data) {\n    currentNode = node;\n\n    enterNode();\n    fn(data);\n    exitNode();\n\n    if ('production' !== 'production') {}\n\n    return node;\n  });\n\n  /**\n   * Patches an Element with the the provided function. Exactly one top level\n   * element call should be made corresponding to `node`.\n   * @param {!Element} node The Element where the patch should start.\n   * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n   *     calls that describe the DOM. This should have at most one top level\n   *     element call.\n   * @param {T=} data An argument passed to fn to represent DOM state.\n   * @return {?Node} The node if it was updated, its replacedment or null if it\n   *     was removed.\n   * @template T\n   */\n  var patchOuter = patchFactory(function (node, fn, data) {\n    var startNode = /** @type {!Element} */{ nextSibling: node };\n    var expectedNextNode = null;\n    var expectedPrevNode = null;\n\n    if ('production' !== 'production') {}\n\n    currentNode = startNode;\n    fn(data);\n\n    if ('production' !== 'production') {}\n\n    if (node !== currentNode) {\n      removeChild(currentParent, node, getData(currentParent).keyMap);\n    }\n\n    return startNode === currentNode ? null : currentNode;\n  });\n\n  /**\n   * Checks whether or not the current node matches the specified nodeName and\n   * key.\n   *\n   * @param {!Node} matchNode A node to match the data to.\n   * @param {?string} nodeName The nodeName for this node.\n   * @param {?string=} key An optional key that identifies a node.\n   * @return {boolean} True if the node matches, false otherwise.\n   */\n  var matches = function (matchNode, nodeName, key) {\n    var data = getData(matchNode);\n\n    // Key check is done using double equals as we want to treat a null key the\n    // same as undefined. This should be okay as the only values allowed are\n    // strings, null and undefined so the == semantics are not too weird.\n    return nodeName === data.nodeName && key == data.key;\n  };\n\n  /**\n   * Aligns the virtual Element definition with the actual DOM, moving the\n   * corresponding DOM node to the correct location or creating it if necessary.\n   * @param {string} nodeName For an Element, this should be a valid tag string.\n   *     For a Text, this should be #text.\n   * @param {?string=} key The key used to identify this element.\n   */\n  var alignWithDOM = function (nodeName, key) {\n    if (currentNode && matches(currentNode, nodeName, key)) {\n      return;\n    }\n\n    var parentData = getData(currentParent);\n    var currentNodeData = currentNode && getData(currentNode);\n    var keyMap = parentData.keyMap;\n    var node = undefined;\n\n    // Check to see if the node has moved within the parent.\n    if (key) {\n      var keyNode = keyMap[key];\n      if (keyNode) {\n        if (matches(keyNode, nodeName, key)) {\n          node = keyNode;\n        } else if (keyNode === currentNode) {\n          context.markDeleted(keyNode);\n        } else {\n          removeChild(currentParent, keyNode, keyMap);\n        }\n      }\n    }\n\n    // Create the node if it doesn't exist.\n    if (!node) {\n      if (nodeName === '#text') {\n        node = createText(doc);\n      } else {\n        node = createElement(doc, currentParent, nodeName, key);\n      }\n\n      if (key) {\n        keyMap[key] = node;\n      }\n\n      context.markCreated(node);\n    }\n\n    // Re-order the node into the right position, preserving focus if either\n    // node or currentNode are focused by making sure that they are not detached\n    // from the DOM.\n    if (getData(node).focused) {\n      // Move everything else before the node.\n      moveBefore(currentParent, node, currentNode);\n    } else if (currentNodeData && currentNodeData.key && !currentNodeData.focused) {\n      // Remove the currentNode, which can always be added back since we hold a\n      // reference through the keyMap. This prevents a large number of moves when\n      // a keyed item is removed or moved backwards in the DOM.\n      currentParent.replaceChild(node, currentNode);\n      parentData.keyMapValid = false;\n    } else {\n      currentParent.insertBefore(node, currentNode);\n    }\n\n    currentNode = node;\n  };\n\n  /**\n   * @param {?Node} node\n   * @param {?Node} child\n   * @param {?Object<string, !Element>} keyMap\n   */\n  var removeChild = function (node, child, keyMap) {\n    node.removeChild(child);\n    context.markDeleted( /** @type {!Node}*/child);\n\n    var key = getData(child).key;\n    if (key) {\n      delete keyMap[key];\n    }\n  };\n\n  /**\n   * Clears out any unvisited Nodes, as the corresponding virtual element\n   * functions were never called for them.\n   */\n  var clearUnvisitedDOM = function () {\n    var node = currentParent;\n    var data = getData(node);\n    var keyMap = data.keyMap;\n    var keyMapValid = data.keyMapValid;\n    var child = node.lastChild;\n    var key = undefined;\n\n    if (child === currentNode && keyMapValid) {\n      return;\n    }\n\n    while (child !== currentNode) {\n      removeChild(node, child, keyMap);\n      child = node.lastChild;\n    }\n\n    // Clean the keyMap, removing any unusued keys.\n    if (!keyMapValid) {\n      for (key in keyMap) {\n        child = keyMap[key];\n        if (child.parentNode !== node) {\n          context.markDeleted(child);\n          delete keyMap[key];\n        }\n      }\n\n      data.keyMapValid = true;\n    }\n  };\n\n  /**\n   * Changes to the first child of the current node.\n   */\n  var enterNode = function () {\n    currentParent = currentNode;\n    currentNode = null;\n  };\n\n  /**\n   * @return {?Node} The next Node to be patched.\n   */\n  var getNextNode = function () {\n    if (currentNode) {\n      return currentNode.nextSibling;\n    } else {\n      return currentParent.firstChild;\n    }\n  };\n\n  /**\n   * Changes to the next sibling of the current node.\n   */\n  var nextNode = function () {\n    currentNode = getNextNode();\n  };\n\n  /**\n   * Changes to the parent of the current node, removing any unvisited children.\n   */\n  var exitNode = function () {\n    clearUnvisitedDOM();\n\n    currentNode = currentParent;\n    currentParent = currentParent.parentNode;\n  };\n\n  /**\n   * Makes sure that the current node is an Element with a matching tagName and\n   * key.\n   *\n   * @param {string} tag The element's tag.\n   * @param {?string=} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @return {!Element} The corresponding Element.\n   */\n  var coreElementOpen = function (tag, key) {\n    nextNode();\n    alignWithDOM(tag, key);\n    enterNode();\n    return (/** @type {!Element} */currentParent\n    );\n  };\n\n  /**\n   * Closes the currently open Element, removing any unvisited children if\n   * necessary.\n   *\n   * @return {!Element} The corresponding Element.\n   */\n  var coreElementClose = function () {\n    if ('production' !== 'production') {}\n\n    exitNode();\n    return (/** @type {!Element} */currentNode\n    );\n  };\n\n  /**\n   * Makes sure the current node is a Text node and creates a Text node if it is\n   * not.\n   *\n   * @return {!Text} The corresponding Text Node.\n   */\n  var coreText = function () {\n    nextNode();\n    alignWithDOM('#text', null);\n    return (/** @type {!Text} */currentNode\n    );\n  };\n\n  /**\n   * Gets the current Element being patched.\n   * @return {!Element}\n   */\n  var currentElement = function () {\n    if ('production' !== 'production') {}\n    return (/** @type {!Element} */currentParent\n    );\n  };\n\n  /**\n   * @return {Node} The Node that will be evaluated for the next instruction.\n   */\n  var currentPointer = function () {\n    if ('production' !== 'production') {}\n    return getNextNode();\n  };\n\n  /**\n   * Skips the children in a subtree, allowing an Element to be closed without\n   * clearing out the children.\n   */\n  var skip = function () {\n    if ('production' !== 'production') {}\n    currentNode = currentParent.lastChild;\n  };\n\n  /**\n   * Skips the next Node to be patched, moving the pointer forward to the next\n   * sibling of the current pointer.\n   */\n  var skipNode = nextNode;\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /** @const */\n  var symbols = {\n    default: '__default'\n  };\n\n  /**\n   * @param {string} name\n   * @return {string|undefined} The namespace to use for the attribute.\n   */\n  var getNamespace = function (name) {\n    if (name.lastIndexOf('xml:', 0) === 0) {\n      return 'http://www.w3.org/XML/1998/namespace';\n    }\n\n    if (name.lastIndexOf('xlink:', 0) === 0) {\n      return 'http://www.w3.org/1999/xlink';\n    }\n  };\n\n  /**\n   * Applies an attribute or property to a given Element. If the value is null\n   * or undefined, it is removed from the Element. Otherwise, the value is set\n   * as an attribute.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {?(boolean|number|string)=} value The attribute's value.\n   */\n  var applyAttr = function (el, name, value) {\n    if (value == null) {\n      el.removeAttribute(name);\n    } else {\n      var attrNS = getNamespace(name);\n      if (attrNS) {\n        el.setAttributeNS(attrNS, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    }\n  };\n\n  /**\n   * Applies a property to a given Element.\n   * @param {!Element} el\n   * @param {string} name The property's name.\n   * @param {*} value The property's value.\n   */\n  var applyProp = function (el, name, value) {\n    el[name] = value;\n  };\n\n  /**\n   * Applies a value to a style declaration. Supports CSS custom properties by\n   * setting properties containing a dash using CSSStyleDeclaration.setProperty.\n   * @param {CSSStyleDeclaration} style\n   * @param {!string} prop\n   * @param {*} value\n   */\n  var setStyleValue = function (style, prop, value) {\n    if (prop.indexOf('-') >= 0) {\n      style.setProperty(prop, /** @type {string} */value);\n    } else {\n      style[prop] = value;\n    }\n  };\n\n  /**\n   * Applies a style to an Element. No vendor prefix expansion is done for\n   * property names/values.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {*} style The style to set. Either a string of css or an object\n   *     containing property-value pairs.\n   */\n  var applyStyle = function (el, name, style) {\n    if (typeof style === 'string') {\n      el.style.cssText = style;\n    } else {\n      el.style.cssText = '';\n      var elStyle = el.style;\n      var obj = /** @type {!Object<string,string>} */style;\n\n      for (var prop in obj) {\n        if (has(obj, prop)) {\n          setStyleValue(elStyle, prop, obj[prop]);\n        }\n      }\n    }\n  };\n\n  /**\n   * Updates a single attribute on an Element.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {*} value The attribute's value. If the value is an object or\n   *     function it is set on the Element, otherwise, it is set as an HTML\n   *     attribute.\n   */\n  var applyAttributeTyped = function (el, name, value) {\n    var type = typeof value;\n\n    if (type === 'object' || type === 'function') {\n      applyProp(el, name, value);\n    } else {\n      applyAttr(el, name, /** @type {?(boolean|number|string)} */value);\n    }\n  };\n\n  /**\n   * Calls the appropriate attribute mutator for this attribute.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {*} value The attribute's value.\n   */\n  var updateAttribute = function (el, name, value) {\n    var data = getData(el);\n    var attrs = data.attrs;\n\n    if (attrs[name] === value) {\n      return;\n    }\n\n    var mutator = attributes[name] || attributes[symbols.default];\n    mutator(el, name, value);\n\n    attrs[name] = value;\n  };\n\n  /**\n   * A publicly mutable object to provide custom mutators for attributes.\n   * @const {!Object<string, function(!Element, string, *)>}\n   */\n  var attributes = createMap();\n\n  // Special generic mutator that's called for any attribute that does not\n  // have a specific mutator.\n  attributes[symbols.default] = applyAttributeTyped;\n\n  attributes['style'] = applyStyle;\n\n  /**\n   * The offset in the virtual element declaration where the attributes are\n   * specified.\n   * @const\n   */\n  var ATTRIBUTES_OFFSET = 3;\n\n  /**\n   * Builds an array of arguments for use with elementOpenStart, attr and\n   * elementOpenEnd.\n   * @const {Array<*>}\n   */\n  var argsBuilder = [];\n\n  /**\n   * @param {string} tag The element's tag.\n   * @param {?string=} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   * @param {...*} var_args, Attribute name/value pairs of the dynamic attributes\n   *     for the Element.\n   * @return {!Element} The corresponding Element.\n   */\n  var elementOpen = function (tag, key, statics, var_args) {\n    if ('production' !== 'production') {}\n\n    var node = coreElementOpen(tag, key);\n    var data = getData(node);\n\n    if (!data.staticsApplied) {\n      if (statics) {\n        for (var _i = 0; _i < statics.length; _i += 2) {\n          var name = /** @type {string} */statics[_i];\n          var value = statics[_i + 1];\n          updateAttribute(node, name, value);\n        }\n      }\n      // Down the road, we may want to keep track of the statics array to use it\n      // as an additional signal about whether a node matches or not. For now,\n      // just use a marker so that we do not reapply statics.\n      data.staticsApplied = true;\n    }\n\n    /*\n     * Checks to see if one or more attributes have changed for a given Element.\n     * When no attributes have changed, this is much faster than checking each\n     * individual argument. When attributes have changed, the overhead of this is\n     * minimal.\n     */\n    var attrsArr = data.attrsArr;\n    var newAttrs = data.newAttrs;\n    var isNew = !attrsArr.length;\n    var i = ATTRIBUTES_OFFSET;\n    var j = 0;\n\n    for (; i < arguments.length; i += 2, j += 2) {\n      var _attr = arguments[i];\n      if (isNew) {\n        attrsArr[j] = _attr;\n        newAttrs[_attr] = undefined;\n      } else if (attrsArr[j] !== _attr) {\n        break;\n      }\n\n      var value = arguments[i + 1];\n      if (isNew || attrsArr[j + 1] !== value) {\n        attrsArr[j + 1] = value;\n        updateAttribute(node, _attr, value);\n      }\n    }\n\n    if (i < arguments.length || j < attrsArr.length) {\n      for (; i < arguments.length; i += 1, j += 1) {\n        attrsArr[j] = arguments[i];\n      }\n\n      if (j < attrsArr.length) {\n        attrsArr.length = j;\n      }\n\n      /*\n       * Actually perform the attribute update.\n       */\n      for (i = 0; i < attrsArr.length; i += 2) {\n        var name = /** @type {string} */attrsArr[i];\n        var value = attrsArr[i + 1];\n        newAttrs[name] = value;\n      }\n\n      for (var _attr2 in newAttrs) {\n        updateAttribute(node, _attr2, newAttrs[_attr2]);\n        newAttrs[_attr2] = undefined;\n      }\n    }\n\n    return node;\n  };\n\n  /**\n   * Declares a virtual Element at the current location in the document. This\n   * corresponds to an opening tag and a elementClose tag is required. This is\n   * like elementOpen, but the attributes are defined using the attr function\n   * rather than being passed as arguments. Must be folllowed by 0 or more calls\n   * to attr, then a call to elementOpenEnd.\n   * @param {string} tag The element's tag.\n   * @param {?string=} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   */\n  var elementOpenStart = function (tag, key, statics) {\n    if ('production' !== 'production') {}\n\n    argsBuilder[0] = tag;\n    argsBuilder[1] = key;\n    argsBuilder[2] = statics;\n  };\n\n  /***\n   * Defines a virtual attribute at this point of the DOM. This is only valid\n   * when called between elementOpenStart and elementOpenEnd.\n   *\n   * @param {string} name\n   * @param {*} value\n   */\n  var attr = function (name, value) {\n    if ('production' !== 'production') {}\n\n    argsBuilder.push(name);\n    argsBuilder.push(value);\n  };\n\n  /**\n   * Closes an open tag started with elementOpenStart.\n   * @return {!Element} The corresponding Element.\n   */\n  var elementOpenEnd = function () {\n    if ('production' !== 'production') {}\n\n    var node = elementOpen.apply(null, argsBuilder);\n    argsBuilder.length = 0;\n    return node;\n  };\n\n  /**\n   * Closes an open virtual Element.\n   *\n   * @param {string} tag The element's tag.\n   * @return {!Element} The corresponding Element.\n   */\n  var elementClose = function (tag) {\n    if ('production' !== 'production') {}\n\n    var node = coreElementClose();\n\n    if ('production' !== 'production') {}\n\n    return node;\n  };\n\n  /**\n   * Declares a virtual Element at the current location in the document that has\n   * no children.\n   * @param {string} tag The element's tag.\n   * @param {?string=} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n   *     for the Element.\n   * @return {!Element} The corresponding Element.\n   */\n  var elementVoid = function (tag, key, statics, var_args) {\n    elementOpen.apply(null, arguments);\n    return elementClose(tag);\n  };\n\n  /**\n   * Declares a virtual Text at this point in the document.\n   *\n   * @param {string|number|boolean} value The value of the Text.\n   * @param {...(function((string|number|boolean)):string)} var_args\n   *     Functions to format the value which are called only when the value has\n   *     changed.\n   * @return {!Text} The corresponding text node.\n   */\n  var text = function (value, var_args) {\n    if ('production' !== 'production') {}\n\n    var node = coreText();\n    var data = getData(node);\n\n    if (data.text !== value) {\n      data.text = /** @type {string} */value;\n\n      var formatted = value;\n      for (var i = 1; i < arguments.length; i += 1) {\n        /*\n         * Call the formatter function directly to prevent leaking arguments.\n         * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n         */\n        var fn = arguments[i];\n        formatted = fn(formatted);\n      }\n\n      node.data = formatted;\n    }\n\n    return node;\n  };\n\n  exports.patch = patchInner;\n  exports.patchInner = patchInner;\n  exports.patchOuter = patchOuter;\n  exports.currentElement = currentElement;\n  exports.currentPointer = currentPointer;\n  exports.skip = skip;\n  exports.skipNode = skipNode;\n  exports.elementVoid = elementVoid;\n  exports.elementOpenStart = elementOpenStart;\n  exports.elementOpenEnd = elementOpenEnd;\n  exports.elementOpen = elementOpen;\n  exports.elementClose = elementClose;\n  exports.text = text;\n  exports.attr = attr;\n  exports.symbols = symbols;\n  exports.attributes = attributes;\n  exports.applyAttr = applyAttr;\n  exports.applyProp = applyProp;\n  exports.notifications = notifications;\n  exports.importNode = importNode;\n\n}));\n\n/* jshint ignore:end */\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["ComponentRenderer.js"],"names":["ComponentRenderer","component","component_","componentRendererEvents_","add","once","render","bind","on","handleRendered_","constructor","SYNC_UPDATES_MERGED","handleComponentRendererStateKeyChanged_","handleComponentRendererStateChanged_","removeAllListeners","changes","shouldRerender_","update","data","key","isRendered_","count","Object","keys","length","hasOwnProperty","element","document","createElement","emit","skipUpdates_","hasChangedBesidesElement_"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAQMA,iB;;;AACL;;;;;AAKA,6BAAYC,SAAZ,EAAuB;AAAA;;AAAA;;AAEtB,SAAKC,UAAL,GAAkBD,SAAlB;;AAEA,SAAKE,wBAAL,GAAgC,0BAAhC;AACA,SAAKA,wBAAL,CAA8BC,GAA9B,CACC,MAAKF,UAAL,CAAgBG,IAAhB,CAAqB,QAArB,EAA+B,MAAKC,MAAL,CAAYC,IAAZ,OAA/B,CADD;AAGA,SAAKC,EAAL,CAAQ,UAAR,EAAoB,MAAKC,eAAzB;;AAEA,OAAI,MAAKP,UAAL,CAAgBQ,WAAhB,CAA4BC,mBAAhC,EAAqD;AACpD,UAAKR,wBAAL,CAA8BC,GAA9B,CACC,MAAKF,UAAL,CAAgBM,EAAhB,CACC,iBADD,EAEC,MAAKI,uCAAL,CAA6CL,IAA7C,OAFD,CADD;AAMA,IAPD,MAOO;AACN,UAAKJ,wBAAL,CAA8BC,GAA9B,CACC,MAAKF,UAAL,CAAgBM,EAAhB,CACC,cADD,EAEC,MAAKK,oCAAL,CAA0CN,IAA1C,OAFD,CADD;AAMA;AAxBqB;AAyBtB;;AAED;;;;;;;qCAGkB;AACjB,SAAKJ,wBAAL,CAA8BW,kBAA9B;AACA,SAAKX,wBAAL,GAAgC,IAAhC;AACA;;;wDAWoCY,O,EAAS;AAC7C,QAAI,KAAKC,eAAL,CAAqBD,OAArB,CAAJ,EAAmC;AAClC,UAAKE,MAAL,CAAYF,OAAZ;AACA;AACD;;;2DASuCG,I,EAAM;AAC7C,QAAMH,UAAU;AACfA,kCACEG,KAAKC,GADP,EACaD,IADb;AADe,KAAhB;AAKA,QAAI,KAAKF,eAAL,CAAqBD,OAArB,CAAJ,EAAmC;AAClC,UAAKE,MAAL,CAAYF,OAAZ;AACA;AACD;;;qCAMiB;AACjB,SAAKK,WAAL,GAAmB,IAAnB;AACA;;;6CAQyBL,O,EAAS;AAClC,QAAIM,QAAQC,OAAOC,IAAP,CAAYR,OAAZ,EAAqBS,MAAjC;AACA,QAAIT,QAAQU,cAAR,CAAuB,SAAvB,CAAJ,EAAuC;AACtCJ;AACA;AACD,WAAOA,QAAQ,CAAf;AACA;;;4BAKQ;AACR,QAAI,CAAC,KAAKnB,UAAL,CAAgBwB,OAArB,EAA8B;AAC7B,UAAKxB,UAAL,CAAgBwB,OAAhB,GAA0BC,SAASC,aAAT,CAAuB,KAAvB,CAA1B;AACA;AACD,SAAKC,IAAL,CAAU,UAAV,EAAsB,CAAC,KAAKT,WAA5B;AACA;;;mCAQeL,O,EAAS;AACxB,WAAO,KAAKK,WAAL,IACN,CAAC,KAAKU,YADA,IAEN,KAAKC,yBAAL,CAA+BhB,QAAQA,OAAvC,CAFD;AAGA;;;sCAKkB;AAClB,SAAKe,YAAL,GAAoB,IAApB;AACA;;;qCAKiB;AACjB,SAAKA,YAAL,GAAoB,KAApB;AACA;;;4BASQ,CAAE;;;;;;mBAGG9B,iB","file":"node_modules/metal-component/src/ComponentRenderer.js","sourcesContent":["'use strict';\n\nimport { EventEmitter, EventHandler } from 'metal-events';\n\n/**\n * Base class that component renderers should extend from. It defines the\n * required methods all renderers should have.\n */\nclass ComponentRenderer extends EventEmitter {\n\t/**\n\t * Constructor function for `ComponentRenderer`.\n\t * @param {!Component} component The component that this renderer is\n\t *     responsible for.\n\t */\n\tconstructor(component) {\n\t\tsuper();\n\t\tthis.component_ = component;\n\n\t\tthis.componentRendererEvents_ = new EventHandler();\n\t\tthis.componentRendererEvents_.add(\n\t\t\tthis.component_.once('render', this.render.bind(this))\n\t\t);\n\t\tthis.on('rendered', this.handleRendered_);\n\n\t\tif (this.component_.constructor.SYNC_UPDATES_MERGED) {\n\t\t\tthis.componentRendererEvents_.add(\n\t\t\t\tthis.component_.on(\n\t\t\t\t\t'stateKeyChanged',\n\t\t\t\t\tthis.handleComponentRendererStateKeyChanged_.bind(this)\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\tthis.componentRendererEvents_.add(\n\t\t\t\tthis.component_.on(\n\t\t\t\t\t'stateChanged',\n\t\t\t\t\tthis.handleComponentRendererStateChanged_.bind(this)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.componentRendererEvents_.removeAllListeners();\n\t\tthis.componentRendererEvents_ = null;\n\t}\n\n\t/**\n\t * Handles a `stateChanged` event from this renderer's component. Calls the\n\t * `update` function if the component has already been rendered for the first\n\t * time.\n\t * @param {!Object<string, Object>} changes Object containing the names\n\t *     of all changed state keys, each mapped to an object with its new\n\t *     (newVal) and previous (prevVal) values.\n\t * @protected\n\t */\n\thandleComponentRendererStateChanged_(changes) {\n\t\tif (this.shouldRerender_(changes)) {\n\t\t\tthis.update(changes);\n\t\t}\n\t}\n\n\t/**\n\t * Handles a `stateKeyChanged` event from this renderer's component. This is\n\t * similar to `handleComponentRendererStateChanged_`, but only called for\n\t * components that have requested updates to happen synchronously.\n\t * @param {!{key: string, newVal: *, prevVal: *}} data\n\t * @protected\n\t */\n\thandleComponentRendererStateKeyChanged_(data) {\n\t\tconst changes = {\n\t\t\tchanges: {\n\t\t\t\t[data.key]: data\n\t\t\t}\n\t\t};\n\t\tif (this.shouldRerender_(changes)) {\n\t\t\tthis.update(changes);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the \"rendered\" event.\n\t * @protected\n\t */\n\thandleRendered_() {\n\t\tthis.isRendered_ = true;\n\t}\n\n\t/**\n\t * Checks if any other state property besides \"element\" has changed.\n\t * @param {!Object} changes\n\t * @return {boolean}\n\t * @protected\n\t */\n\thasChangedBesidesElement_(changes) {\n\t\tvar count = Object.keys(changes).length;\n\t\tif (changes.hasOwnProperty('element')) {\n\t\t\tcount--;\n\t\t}\n\t\treturn count > 0;\n\t}\n\n\t/**\n\t * Renders the component's whole content (including its main element).\n\t */\n\trender() {\n\t\tif (!this.component_.element) {\n\t\t\tthis.component_.element = document.createElement('div');\n\t\t}\n\t\tthis.emit('rendered', !this.isRendered_);\n\t}\n\n\t/**\n\t * Checks if the given changes object should cause a rerender.\n\t * @param {!Object} changes\n\t * @return {boolean}\n\t * @protected\n\t */\n\tshouldRerender_(changes) {\n\t\treturn this.isRendered_ &&\n\t\t\t!this.skipUpdates_ &&\n\t\t\tthis.hasChangedBesidesElement_(changes.changes);\n\t}\n\n\t/**\n\t * Skips updates until `stopSkipUpdates` is called.\n\t */\n\tstartSkipUpdates() {\n\t\tthis.skipUpdates_ = true;\n\t}\n\n\t/**\n\t * Stops skipping updates.\n\t */\n\tstopSkipUpdates() {\n\t\tthis.skipUpdates_ = false;\n\t}\n\n\t/**\n\t * Updates the component's element html. This is automatically called when\n\t * the value of at least one of the component's state keys has changed.\n\t * @param {Object.<string, Object>} changes Object containing the names\n\t *     of all changed state keys, each mapped to an object with its new\n\t *     (newVal) and previous (prevVal) values.\n\t */\n\tupdate() {}\n}\n\nexport default ComponentRenderer;\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["State.js"],"names":["State","opt_config","scheduledBatchData_","stateInfo_","setShouldUseFacade","mergeInvalidKeys_","addToStateFromStaticHint_","name","config","initialValue","buildKeyInfo_","Object","defineProperty","buildKeyPropertyDef_","configsOrName","opt_initialValuesOrConfig","opt_contextOrInitialValue","isString","addKeyToState","initialValues","names","keys","props","i","length","defineProperties","ctor","constructor","defineContext","mergeStateStatic","prototype","addToState","STATE_MERGED","INVALID_KEYS_MERGED","Error","assertValidStateKeyName_","state","KeyStates","UNINITIALIZED","configurable","enumerable","get","getStateKeyValue_","set","val","setStateKeyValue_","fn","args","apply","isFunction","value","currentValue","info","setter","callFunction_","validator","validatorReturn","console","error","writeOnce","written","isDisposed","data","emit","opt_names","getStateKeys","initStateKey_","INITIALIZED","key","prevVal","shouldInformChange_","newVal","scheduleBatchEvent_","INITIALIZING","setInitialValue_","INITIALIZING_DEFAULT","setDefaultValue_","mergeSuperClassesProperty","values","flatten","reduce","merged","changeData","nextTick","emitBatchEvent_","changes","hasStateKey","undefined","valueFn","opt_callback","forEach","once","canSetState","validateKeyValue_","callSetter_","informChange_","isObject","callValidator_","mixin","concat","reverse","mergeState_","INVALID_KEYS"],"mappings":"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","file":"node_modules/metal-state/src/State.js","sourcesContent":["'use strict';\n\nimport { array, async, core, object } from 'metal';\nimport { EventEmitter } from 'metal-events';\n\n/**\n * State adds support for having object properties that can be watched for\n * changes, as well as configured with validators, setters and other options.\n * See the `addToState` method for a complete list of available configuration\n * options for each state key.\n * @constructor\n * @extends {EventEmitter}\n */\nclass State extends EventEmitter {\n\tconstructor(opt_config) {\n\t\tsuper();\n\n\t\t/**\n\t\t * Object with information about the batch event that is currently\n\t\t * scheduled, or null if none is.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.scheduledBatchData_ = null;\n\n\t\t/**\n\t\t * Object that contains information about all this instance's state keys.\n\t\t * @type {!Object<string, !Object>}\n\t\t * @protected\n\t\t */\n\t\tthis.stateInfo_ = {};\n\n\t\tthis.setShouldUseFacade(true);\n\t\tthis.mergeInvalidKeys_();\n\t\tthis.addToStateFromStaticHint_(opt_config);\n\t}\n\n\t/**\n\t * Adds the given key to the state.\n\t * @param {string} name The name of the new state key.\n\t * @param {Object.<string, *>=} config The configuration object for the new\n\t *     key. See `addToState` for supported settings.\n\t * @param {*} initialValue The initial value of the new key.\n\t */\n\taddKeyToState(name, config, initialValue) {\n\t\tthis.buildKeyInfo_(name, config, initialValue);\n\t\tObject.defineProperty(this, name, this.buildKeyPropertyDef_(name));\n\t}\n\n\t/**\n\t * Adds the given key(s) to the state, together with its(their) configs.\n\t * Config objects support the given settings:\n\t *     setter - Function for normalizing state key values. It receives the new\n\t *     value that was set, and returns the value that should be stored.\n\t *\n\t *     validator - Function that validates state key values. When it returns\n\t *     false, the new value is ignored. When it returns an instance of Error,\n\t *     it will emit the error to the console.\n\t *\n\t *     value - The default value for the state key. Note that setting this to\n\t *     an object will cause all class instances to use the same reference to\n\t *     the object. To have each instance use a different reference for objects,\n\t *     use the `valueFn` option instead.\n\t *\n\t *     valueFn - A function that returns the default value for a state key.\n\t *\n\t *     writeOnce - Ignores writes to the state key after it's been first\n\t *     written to. That is, allows writes only when setting the value for the\n\t *     first time.\n\t * @param {!Object.<string, !Object>|string} configsOrName An object that maps\n\t *     configuration options for keys to be added to the state or the name of\n\t *     a single key to be added.\n\t * @param {Object.<string, *>=} opt_initialValuesOrConfig An object that maps\n\t *     state keys to their initial values. These values have higher precedence\n\t *     than the default values specified in the configurations. If a single\n\t *     key name was passed as the first param instead though, then this should\n\t *     be the configuration object for that key.\n\t * @param {boolean|Object|*=} opt_contextOrInitialValue If the first\n\t *     param passed to this method was a config object, this should be the\n\t *     context where the added state keys will be defined (defaults to `this`),\n\t *     or false if they shouldn't be defined at all. If the first param was a\n\t *     single key name though, this should be its initial value.\n\t */\n\taddToState(configsOrName, opt_initialValuesOrConfig, opt_contextOrInitialValue) {\n\t\tif (core.isString(configsOrName)) {\n\t\t\treturn this.addKeyToState(\n\t\t\t\tconfigsOrName,\n\t\t\t\topt_initialValuesOrConfig,\n\t\t\t\topt_contextOrInitialValue\n\t\t\t);\n\t\t}\n\n\t\tvar initialValues = opt_initialValuesOrConfig || {};\n\t\tvar names = Object.keys(configsOrName);\n\n\t\tvar props = {};\n\t\tfor (var i = 0; i < names.length; i++) {\n\t\t\tvar name = names[i];\n\t\t\tthis.buildKeyInfo_(name, configsOrName[name], initialValues[name]);\n\t\t\tprops[name] = this.buildKeyPropertyDef_(name);\n\t\t}\n\n\t\tif (opt_contextOrInitialValue !== false) {\n\t\t\tObject.defineProperties(opt_contextOrInitialValue || this, props);\n\t\t}\n\t}\n\n\t/**\n\t * Adds state keys from super classes static hint `MyClass.STATE = {};`.\n\t * @param {Object.<string, !Object>=} opt_config An object that maps all the\n\t *     configurations for state keys.\n\t * @protected\n\t */\n\taddToStateFromStaticHint_(opt_config) {\n\t\tvar ctor = this.constructor;\n\t\tvar defineContext = false;\n\t\tif (State.mergeStateStatic(ctor)) {\n\t\t\tdefineContext = ctor.prototype;\n\t\t}\n\t\tthis.addToState(ctor.STATE_MERGED, opt_config, defineContext);\n\t}\n\n\t/**\n\t * Checks that the given name is a valid state key name. If it's not, an error\n\t * will be thrown.\n\t * @param {string} name The name to be validated.\n\t * @throws {Error}\n\t * @protected\n\t */\n\tassertValidStateKeyName_(name) {\n\t\tif (this.constructor.INVALID_KEYS_MERGED[name]) {\n\t\t\tthrow new Error('It\\'s not allowed to create a state key with the name \"' + name + '\".');\n\t\t}\n\t}\n\n\t/**\n\t * Builds the info object for the specified state key.\n\t * @param {string} name The name of the key.\n\t * @param {Object} config The config object for the key.\n\t * @param {*} initialValue The initial value of the key.\n\t * @protected\n\t */\n\tbuildKeyInfo_(name, config, initialValue) {\n\t\tthis.assertValidStateKeyName_(name);\n\n\t\tthis.stateInfo_[name] = {\n\t\t\tconfig: config || {},\n\t\t\tinitialValue: initialValue,\n\t\t\tstate: State.KeyStates.UNINITIALIZED\n\t\t};\n\t}\n\n\t/**\n\t * Builds the property definition object for the specified state key.\n\t * @param {string} name The name of the key.\n\t * @return {!Object}\n\t * @protected\n\t */\n\tbuildKeyPropertyDef_(name) {\n\t\treturn {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn this.getStateKeyValue_(name);\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tthis.setStateKeyValue_(name, val);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Calls the requested function, running the appropriate code for when it's\n\t * passed as an actual function object or just the function's name.\n\t * @param {!Function|string} fn Function, or name of the function to run.\n\t * @param {!Array} An optional array of parameters to be passed to the\n\t *   function that will be called.\n\t * @return {*} The return value of the called function.\n\t * @protected\n\t */\n\tcallFunction_(fn, args) {\n\t\tif (core.isString(fn)) {\n\t\t\treturn this[fn].apply(this, args);\n\t\t} else if (core.isFunction(fn)) {\n\t\t\treturn fn.apply(this, args);\n\t\t}\n\t}\n\n\t/**\n\t * Calls the state key's setter, if there is one.\n\t * @param {string} name The name of the key.\n\t * @param {*} value The value to be set.\n\t * @param {*} currentValue The current value.\n\t * @return {*} The final value to be set.\n\t * @protected\n\t */\n\tcallSetter_(name, value, currentValue) {\n\t\tvar info = this.stateInfo_[name];\n\t\tvar config = info.config;\n\t\tif (config.setter) {\n\t\t\tvalue = this.callFunction_(config.setter, [value, currentValue]);\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Calls the state key's validator, if there is one. Emits console\n\t * warning if validator returns a string.\n\t * @param {string} name The name of the key.\n\t * @param {*} value The value to be validated.\n\t * @return {boolean} Flag indicating if value is valid or not.\n\t * @protected\n\t */\n\tcallValidator_(name, value) {\n\t\tvar info = this.stateInfo_[name];\n\t\tvar config = info.config;\n\t\tif (config.validator) {\n\t\t\tvar validatorReturn = this.callFunction_(config.validator, [value, name, this]);\n\n\t\t\tif (validatorReturn instanceof Error) {\n\t\t\t\tconsole.error(`Warning: ${validatorReturn}`);\n\t\t\t}\n\t\t\treturn validatorReturn;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks if the it's allowed to write on the requested state key.\n\t * @param {string} name The name of the key.\n\t * @return {boolean}\n\t */\n\tcanSetState(name) {\n\t\tvar info = this.stateInfo_[name];\n\t\treturn !info.config.writeOnce || !info.written;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tthis.stateInfo_ = null;\n\t\tthis.scheduledBatchData_ = null;\n\t}\n\n\t/**\n\t * Emits the state change batch event.\n\t * @protected\n\t */\n\temitBatchEvent_() {\n\t\tif (!this.isDisposed()) {\n\t\t\tvar data = this.scheduledBatchData_;\n\t\t\tthis.scheduledBatchData_ = null;\n\t\t\tthis.emit('stateChanged', data);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the value of the requested state key.\n\t * Note: this can and should be accomplished by accessing the value as a\n\t * regular property. This should only be used in cases where a function is\n\t * actually needed.\n\t * @param {string} name\n\t * @return {*}\n\t */\n\tget(name) {\n\t\treturn this[name];\n\t}\n\n\t/**\n\t * Returns an object that maps state keys to their values.\n\t * @param {Array<string>=} opt_names A list of names of the keys that should\n\t *   be returned. If none is given, the whole state will be returned.\n\t * @return {Object.<string, *>}\n\t */\n\tgetState(opt_names) {\n\t\tvar state = {};\n\t\tvar names = opt_names || this.getStateKeys();\n\n\t\tfor (var i = 0; i < names.length; i++) {\n\t\t\tstate[names[i]] = this[names[i]];\n\t\t}\n\n\t\treturn state;\n\t}\n\n\t/**\n\t * Gets the config object for the requested state key.\n\t * @param {string} name The key's name.\n\t * @return {Object}\n\t * @protected\n\t */\n\tgetStateKeyConfig(name) {\n\t\treturn (this.stateInfo_[name] || {}).config;\n\t}\n\n\t/**\n\t * Returns an array with all state keys.\n\t * @return {Array.<string>}\n\t */\n\tgetStateKeys() {\n\t\treturn Object.keys(this.stateInfo_);\n\t}\n\n\t/**\n\t * Gets the value of the specified state key. This is passed as that key's\n\t * getter to the `Object.defineProperty` call inside the `addKeyToState` method.\n\t * @param {string} name The name of the key.\n\t * @return {*}\n\t * @protected\n\t */\n\tgetStateKeyValue_(name) {\n\t\tthis.initStateKey_(name);\n\t\treturn this.stateInfo_[name].value;\n\t}\n\n\t/**\n\t * Checks if the value of the state key with the given name has already been\n\t * set. Note that this doesn't run the key's getter.\n\t * @param {string} name The name of the key.\n\t * @return {boolean}\n\t */\n\thasBeenSet(name) {\n\t\tvar info = this.stateInfo_[name];\n\t\treturn info.state === State.KeyStates.INITIALIZED || info.initialValue;\n\t}\n\n\t/**\n\t * Checks if the given key is present in this instance's state.\n\t * @param {string} key\n\t * @return {boolean}\n\t */\n\thasStateKey(key) {\n\t\treturn !!this.stateInfo_[key];\n\t}\n\n\t/**\n\t * Informs of changes to a state key's value through an event. Won't trigger\n\t * the event if the value hasn't changed or if it's being initialized.\n\t * @param {string} name The name of the key.\n\t * @param {*} prevVal The previous value of the key.\n\t * @protected\n\t */\n\tinformChange_(name, prevVal) {\n\t\tif (this.shouldInformChange_(name, prevVal)) {\n\t\t\tvar data = {\n\t\t\t\tkey: name,\n\t\t\t\tnewVal: this[name],\n\t\t\t\tprevVal: prevVal\n\t\t\t};\n\t\t\tthis.emit(name + 'Changed', data);\n\t\t\tthis.emit('stateKeyChanged', data);\n\t\t\tthis.scheduleBatchEvent_(data);\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the specified state key, giving it a first value.\n\t * @param {string} name The name of the key.\n\t * @protected\n\t */\n\tinitStateKey_(name) {\n\t\tvar info = this.stateInfo_[name];\n\t\tif (info.state !== State.KeyStates.UNINITIALIZED) {\n\t\t\treturn;\n\t\t}\n\n\t\tinfo.state = State.KeyStates.INITIALIZING;\n\t\tthis.setInitialValue_(name);\n\t\tif (!info.written) {\n\t\t\tinfo.state = State.KeyStates.INITIALIZING_DEFAULT;\n\t\t\tthis.setDefaultValue_(name);\n\t\t}\n\t\tinfo.state = State.KeyStates.INITIALIZED;\n\t}\n\n\t/**\n\t * Merges an array of values for the STATE property into a single object.\n\t * @param {!Array} values The values to be merged.\n\t * @return {!Object} The merged value.\n\t * @static\n\t * @protected\n\t */\n\tstatic mergeState_(values) {\n\t\treturn object.mixin.apply(null, [{}].concat(values.reverse()));\n\t}\n\n\t/**\n\t * Merges the STATE static variable for the given constructor function.\n\t * @param  {!Function} ctor Constructor function.\n\t * @return {boolean} Returns true if merge happens, false otherwise.\n\t * @static\n\t */\n\tstatic mergeStateStatic(ctor) {\n\t\treturn core.mergeSuperClassesProperty(ctor, 'STATE', State.mergeState_);\n\t}\n\n\t/**\n\t * Merges the values of the `INVALID_KEYS` static for the whole hierarchy of\n\t * the current instance.\n\t * @protected\n\t */\n\tmergeInvalidKeys_() {\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'INVALID_KEYS', function(values) {\n\t\t\treturn array.flatten(values).reduce(function(merged, val) {\n\t\t\t\tif (val) {\n\t\t\t\t\tmerged[val] = true;\n\t\t\t\t}\n\t\t\t\treturn merged;\n\t\t\t}, {});\n\t\t});\n\t}\n\n\t/**\n\t * Removes the requested state key.\n\t * @param {string} name The name of the key.\n\t */\n\tremoveStateKey(name) {\n\t\tthis.stateInfo_[name] = null;\n\t\tdelete this[name];\n\t}\n\n\t/**\n\t * Schedules a state change batch event to be emitted asynchronously.\n\t * @param {!Object} changeData Information about a state key's update.\n\t * @protected\n\t */\n\tscheduleBatchEvent_(changeData) {\n\t\tif (!this.scheduledBatchData_) {\n\t\t\tasync.nextTick(this.emitBatchEvent_, this);\n\t\t\tthis.scheduledBatchData_ = {\n\t\t\t\tchanges: {}\n\t\t\t};\n\t\t}\n\n\t\tvar name = changeData.key;\n\t\tvar changes = this.scheduledBatchData_.changes;\n\t\tif (changes[name]) {\n\t\t\tchanges[name].newVal = changeData.newVal;\n\t\t} else {\n\t\t\tchanges[name] = changeData;\n\t\t}\n\t}\n\n\t/**\n\t * Sets the value of the requested state key.\n\t * Note: this can and should be accomplished by setting the state key as a\n\t * regular property. This should only be used in cases where a function is\n\t * actually needed.\n\t * @param {string} name\n\t * @param {*} value\n\t * @return {*}\n\t */\n\tset(name, value) {\n\t\tif (this.hasStateKey(name)) {\n\t\t\tthis[name] = value;\n\t\t}\n\t}\n\n\t/**\n\t * Sets the default value of the requested state key.\n\t * @param {string} name The name of the key.\n\t * @return {*}\n\t * @protected\n\t */\n\tsetDefaultValue_(name) {\n\t\tvar config = this.stateInfo_[name].config;\n\n\t\tif (config.value !== undefined) {\n\t\t\tthis[name] = config.value;\n\t\t} else {\n\t\t\tthis[name] = this.callFunction_(config.valueFn);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the initial value of the requested state key.\n\t * @param {string} name The name of the key.\n\t * @return {*}\n\t * @protected\n\t */\n\tsetInitialValue_(name) {\n\t\tvar info = this.stateInfo_[name];\n\t\tif (info.initialValue !== undefined) {\n\t\t\tthis[name] = info.initialValue;\n\t\t\tinfo.initialValue = undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Sets the value of all the specified state keys.\n\t * @param {!Object.<string,*>} values A map of state keys to the values they\n\t *   should be set to.\n\t * @param {function()=} opt_callback An optional function that will be run\n\t *   after the next batched update is triggered.\n\t */\n\tsetState(values, opt_callback) {\n\t\tObject.keys(values).forEach(name => this.set(name, values[name]));\n\t\tif (opt_callback && this.scheduledBatchData_) {\n\t\t\tthis.once('stateChanged', opt_callback);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the value of the specified state key. This is passed as that key's\n\t * setter to the `Object.defineProperty` call inside the `addKeyToState`\n\t * method.\n\t * @param {string} name The name of the key.\n\t * @param {*} value The new value of the key.\n\t * @protected\n\t */\n\tsetStateKeyValue_(name, value) {\n\t\tif (!this.canSetState(name) || !this.validateKeyValue_(name, value)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar info = this.stateInfo_[name];\n\t\tif (info.initialValue === undefined && info.state === State.KeyStates.UNINITIALIZED) {\n\t\t\tinfo.state = State.KeyStates.INITIALIZED;\n\t\t}\n\n\t\tvar prevVal = this[name];\n\t\tinfo.value = this.callSetter_(name, value, prevVal);\n\t\tinfo.written = true;\n\t\tthis.informChange_(name, prevVal);\n\t}\n\n\t/**\n\t * Checks if we should inform about a state update. Updates are ignored during\n\t * state initialization. Otherwise, updates to primitive values are only\n\t * informed when the new value is different from the previous one. Updates to\n\t * objects (which includes functions and arrays) are always informed outside\n\t * initialization though, since we can't be sure if all of the internal data\n\t * has stayed the same.\n\t * @param {string} name The name of the key.\n\t * @param {*} prevVal The previous value of the key.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tshouldInformChange_(name, prevVal) {\n\t\tvar info = this.stateInfo_[name];\n\t\treturn (info.state === State.KeyStates.INITIALIZED) &&\n\t\t\t(core.isObject(prevVal) || prevVal !== this[name]);\n\t}\n\n\t/**\n\t * Validates the state key's value, which includes calling the validator\n\t * defined in the key's configuration object, if there is one.\n\t * @param {string} name The name of the key.\n\t * @param {*} value The value to be validated.\n\t * @return {boolean} Flag indicating if value is valid or not.\n\t * @protected\n\t */\n\tvalidateKeyValue_(name, value) {\n\t\tvar info = this.stateInfo_[name];\n\n\t\treturn info.state === State.KeyStates.INITIALIZING_DEFAULT ||\n\t\t\tthis.callValidator_(name, value);\n\t}\n}\n\n/**\n * A list with state key names that will automatically be rejected as invalid.\n * Subclasses can define their own invalid keys by setting this static on their\n * constructors, which will be merged together and handled automatically.\n * @type {!Array<string>}\n */\nState.INVALID_KEYS = ['state', 'stateKey'];\n\n/**\n * Constants that represent the states that an a state key can be in.\n * @type {!Object}\n */\nState.KeyStates = {\n\tUNINITIALIZED: 0,\n\tINITIALIZING: 1,\n\tINITIALIZING_DEFAULT: 2,\n\tINITIALIZED: 3\n};\n\nexport default State;\n"],"sourceRoot":"/source/"}
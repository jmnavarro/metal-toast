{"version":3,"sources":["State.js"],"names":["State","opt_config","opt_obj","opt_context","opt_commonOpts","commonOpts_","context_","keysBlacklist_","obj_","scheduledBatchData_","stateInfo_","setShouldUseFacade","mergeInvalidKeys_","addToStateFromStaticHint_","name","config","initialValue","buildKeyInfo_","arguments","length","Object","defineProperty","buildKeyPropertyDef_","validateInitialValue_","assertGivenIfRequired_","configsOrName","opt_initialValuesOrConfig","opt_contextOrInitialValue","addKeyToState","initialValues","names","keys","props","i","hasOwnProperty","defineProperties","ctor","constructor","defineContext","merged","mergeStateStatic","prototype","addToState","STATE_MERGED","info","required","value","state","KeyStates","INITIALIZED","get","console","error","INVALID_KEYS_MERGED","Error","hasInitialValue","assertValidStateKeyName_","mixin","UNINITIALIZED","stateObj","configurable","enumerable","getStateKeyValue_","set","val","setStateKeyValue_","fn","args","apply","currentValue","setter","callFunction_","validator","validatorReturn","writeOnce","written","isDisposed","data","emit","opt_names","getStateKeys","warnIfDisposed_","initStateKey_","hasInitialValue_","key","prevVal","shouldInformChange_","newVal","scheduleBatchEvent_","INITIALIZING","setInitialValue_","setDefaultValue","values","flatten","reduce","changeData","nextTick","emitBatchEvent_","changes","hasStateKey","undefined","valueFn","blacklist","opt_callback","forEach","once","canSetState","validateKeyValue_","callSetter_","informChange_","callValidator_","disposed","warn","concat","reverse","mergeState","INVALID_KEYS"],"mappings":"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","file":"node_modules/metal-state/src/State.js","sourcesContent":["'use strict';\n\nimport {\n\tarray,\n\tasync,\n\tisDefAndNotNull,\n\tisFunction,\n\tisObject,\n\tisString,\n\tmergeSuperClassesProperty,\n\tobject\n} from 'metal';\nimport { EventEmitter } from 'metal-events';\n\n/**\n * State adds support for having object properties that can be watched for\n * changes, as well as configured with validators, setters and other options.\n * See the `addToState` method for a complete list of available configuration\n * options for each state key.\n * @extends {EventEmitter}\n */\nclass State extends EventEmitter {\n\t/**\n\t * Constructor function for `State`.\n\t * @param {Object=} opt_config Optional config object with initial values to\n\t *     set state properties to.\n\t * @param {Object=} opt_obj Optional object that should hold the state\n\t *     properties. If none is given, they will be added directly to `this`\n\t *     instead.\n\t * @param {Object=} opt_context Optional context to call functions (like\n\t *     validators and setters) on. Defaults to `this`.\n\t * @param {Object=} opt_commonOpts Optional common option values to be used\n\t *     by all this instance's state properties.\n\t */\n\tconstructor(opt_config, opt_obj, opt_context, opt_commonOpts) {\n\t\tsuper();\n\n\t\t/**\n\t\t * Common option values to be used by all this instance's state properties.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.commonOpts_ = opt_commonOpts;\n\n\t\t/**\n\t\t * Context to call functions (like validators and setters) on.\n\t\t * @type {!Object}\n\t\t * @protected\n\t\t */\n\t\tthis.context_ = opt_context || this;\n\n\t\t/**\n\t\t * Map of keys that can not be used as state keys.\n\t\t * @type {!Object<string, boolean>}\n\t\t * @protected\n\t\t */\n\t\tthis.keysBlacklist_ = {};\n\n\t\t/**\n\t\t * Object that should hold the state properties.\n\t\t * @type {!Object}\n\t\t * @protected\n\t\t */\n\t\tthis.obj_ = opt_obj || this;\n\n\t\t/**\n\t\t * Object with information about the batch event that is currently\n\t\t * scheduled, or null if none is.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.scheduledBatchData_ = null;\n\n\t\t/**\n\t\t * Object that contains information about all this instance's state keys.\n\t\t * @type {!Object<string, !Object>}\n\t\t * @protected\n\t\t */\n\t\tthis.stateInfo_ = {};\n\n\t\tthis.setShouldUseFacade(true);\n\t\tthis.mergeInvalidKeys_();\n\t\tthis.addToStateFromStaticHint_(opt_config);\n\t}\n\n\t/**\n\t * Adds the given key to the state.\n\t * @param {string} name The name of the new state key.\n\t * @param {Object.<string, *>=} config The configuration object for the new\n\t *     key. See `addToState` for supported settings.\n\t * @param {*} initialValue The initial value of the new key.\n\t */\n\taddKeyToState(name, config, initialValue) {\n\t\tthis.buildKeyInfo_(name, config, initialValue, arguments.length > 2);\n\t\tObject.defineProperty(\n\t\t\tthis.obj_,\n\t\t\tname,\n\t\t\tthis.buildKeyPropertyDef_(name)\n\t\t);\n\t\tthis.validateInitialValue_(name);\n\t\tthis.assertGivenIfRequired_(name);\n\t}\n\n\t/**\n\t * Adds the given key(s) to the state, together with its(their) configs.\n\t * Config objects support the given settings:\n\t *     required - When set to `true`, causes errors to be printed (via\n\t *     `console.error`) if no value is given for the property.\n\t *\n\t *     setter - Function for normalizing state key values. It receives the new\n\t *     value that was set, and returns the value that should be stored.\n\t *\n\t *     validator - Function that validates state key values. When it returns\n\t *     false, the new value is ignored. When it returns an instance of Error,\n\t *     it will emit the error to the console.\n\t *\n\t *     value - The default value for the state key. Note that setting this to\n\t *     an object will cause all class instances to use the same reference to\n\t *     the object. To have each instance use a different reference for objects,\n\t *     use the `valueFn` option instead.\n\t *\n\t *     valueFn - A function that returns the default value for a state key.\n\t *\n\t *     writeOnce - Ignores writes to the state key after it's been first\n\t *     written to. That is, allows writes only when setting the value for the\n\t *     first time.\n\t * @param {!Object.<string, !Object>|string} configsOrName An object that maps\n\t *     configuration options for keys to be added to the state or the name of\n\t *     a single key to be added.\n\t * @param {Object.<string, *>=} opt_initialValuesOrConfig An object that maps\n\t *     state keys to their initial values. These values have higher precedence\n\t *     than the default values specified in the configurations. If a single\n\t *     key name was passed as the first param instead though, then this should\n\t *     be the configuration object for that key.\n\t * @param {boolean|Object|*=} opt_contextOrInitialValue If the first\n\t *     param passed to this method was a config object, this should be the\n\t *     context where the added state keys will be defined (defaults to `this`),\n\t *     or false if they shouldn't be defined at all. If the first param was a\n\t *     single key name though, this should be its initial value.\n\t */\n\taddToState(configsOrName, opt_initialValuesOrConfig, opt_contextOrInitialValue) {\n\t\tif (isString(configsOrName)) {\n\t\t\treturn this.addKeyToState(...arguments);\n\t\t}\n\n\t\tvar initialValues = opt_initialValuesOrConfig || {};\n\t\tvar names = Object.keys(configsOrName);\n\n\t\tvar props = {};\n\t\tfor (let i = 0; i < names.length; i++) {\n\t\t\tvar name = names[i];\n\t\t\tthis.buildKeyInfo_(\n\t\t\t\tname,\n\t\t\t\tconfigsOrName[name],\n\t\t\t\tinitialValues[name],\n\t\t\t\tinitialValues.hasOwnProperty(name)\n\t\t\t);\n\t\t\tprops[name] = this.buildKeyPropertyDef_(name, opt_contextOrInitialValue);\n\t\t\tthis.assertGivenIfRequired_(name);\n\t\t}\n\n\t\tif (opt_contextOrInitialValue !== false) {\n\t\t\tObject.defineProperties(\n\t\t\t\topt_contextOrInitialValue || this.obj_,\n\t\t\t\tprops\n\t\t\t);\n\t\t}\n\n\t\t// Validate initial values after all properties have been defined, otherwise\n\t\t// it won't be possible to access those properties within validators.\n\t\tfor (let i = 0; i < names.length; i++) {\n\t\t\tthis.validateInitialValue_(names[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Adds state keys from super classes static hint `MyClass.STATE = {};`.\n\t * @param {Object.<string, !Object>=} opt_config An object that maps all the\n\t *     configurations for state keys.\n\t * @protected\n\t */\n\taddToStateFromStaticHint_(opt_config) {\n\t\tvar ctor = this.constructor;\n\t\tvar defineContext;\n\t\tvar merged = State.mergeStateStatic(ctor);\n\t\tif (this.obj_ === this) {\n\t\t\tdefineContext = merged ? ctor.prototype : false;\n\t\t}\n\t\tthis.addToState(ctor.STATE_MERGED, opt_config, defineContext);\n\t}\n\n\t/**\n\t * Logs an error if the given property is required but wasn't given.\n\t * @param {string} name\n\t * @protected\n\t */\n\tassertGivenIfRequired_(name) {\n\t\tvar info = this.stateInfo_[name];\n\t\tif (info.config.required) {\n\t\t\tvar value = info.state === State.KeyStates.INITIALIZED ?\n\t\t\t\tthis.get(name) :\n\t\t\t\tinfo.initialValue;\n\t\t\tif (!isDefAndNotNull(value)) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t'The property called \"' + name + '\" is required but didn\\'t ' +\n\t\t\t\t\t'receive a value.'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks that the given name is a valid state key name. If it's not, an error\n\t * will be thrown.\n\t * @param {string} name The name to be validated.\n\t * @throws {Error}\n\t * @protected\n\t */\n\tassertValidStateKeyName_(name) {\n\t\tif (this.constructor.INVALID_KEYS_MERGED[name] || this.keysBlacklist_[name]) {\n\t\t\tthrow new Error('It\\'s not allowed to create a state key with the name \"' + name + '\".');\n\t\t}\n\t}\n\n\t/**\n\t * Builds the info object for the specified state key.\n\t * @param {string} name The name of the key.\n\t * @param {Object} config The config object for the key.\n\t * @param {*} initialValue The initial value of the key.\n\t * @param {boolean} hasInitialValue Flag indicating if an initial value was\n\t *     given or not (important since `initialValue` can also be `undefined`).\n\t * @protected\n\t */\n\tbuildKeyInfo_(name, config, initialValue, hasInitialValue) {\n\t\tthis.assertValidStateKeyName_(name);\n\t\tconfig = (config && config.config) ? config.config : (config || {});\n\t\tif (this.commonOpts_) {\n\t\t\tconfig = object.mixin({}, config, this.commonOpts_);\n\t\t}\n\t\tthis.stateInfo_[name] = {\n\t\t\tconfig,\n\t\t\tstate: State.KeyStates.UNINITIALIZED\n\t\t};\n\t\tif (hasInitialValue) {\n\t\t\tthis.stateInfo_[name].initialValue = initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Builds the property definition object for the specified state key.\n\t * @param {string} name The name of the key.\n\t * @param {Object=} opt_context The object where the property will be added.\n\t * @return {!Object}\n\t * @protected\n\t */\n\tbuildKeyPropertyDef_(name, opt_context) {\n\t\tvar stateObj = opt_context === this.constructor.prototype ? null : this;\n\t\treturn {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn (stateObj || this).getStateKeyValue_(name);\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\t(stateObj || this).setStateKeyValue_(name, val);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Calls the requested function, running the appropriate code for when it's\n\t * passed as an actual function object or just the function's name.\n\t * @param {!Function|string} fn Function, or name of the function to run.\n\t * @param {!Array} An optional array of parameters to be passed to the\n\t *   function that will be called.\n\t * @return {*} The return value of the called function.\n\t * @protected\n\t */\n\tcallFunction_(fn, args) {\n\t\tif (isString(fn)) {\n\t\t\treturn this.context_[fn].apply(this.context_, args);\n\t\t} else if (isFunction(fn)) {\n\t\t\treturn fn.apply(this.context_, args);\n\t\t}\n\t}\n\n\t/**\n\t * Calls the state key's setter, if there is one.\n\t * @param {string} name The name of the key.\n\t * @param {*} value The value to be set.\n\t * @param {*} currentValue The current value.\n\t * @return {*} The final value to be set.\n\t * @protected\n\t */\n\tcallSetter_(name, value, currentValue) {\n\t\tvar info = this.stateInfo_[name];\n\t\tvar config = info.config;\n\t\tif (config.setter) {\n\t\t\tvalue = this.callFunction_(config.setter, [value, currentValue]);\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Calls the state key's validator, if there is one. Emits console\n\t * warning if validator returns a string.\n\t * @param {string} name The name of the key.\n\t * @param {*} value The value to be validated.\n\t * @return {boolean} Flag indicating if value is valid or not.\n\t * @protected\n\t */\n\tcallValidator_(name, value) {\n\t\tvar info = this.stateInfo_[name];\n\t\tvar config = info.config;\n\t\tif (config.validator) {\n\t\t\tvar validatorReturn = this.callFunction_(\n\t\t\t\tconfig.validator,\n\t\t\t\t[value, name, this.context_]\n\t\t\t);\n\n\t\t\tif (validatorReturn instanceof Error) {\n\t\t\t\tconsole.error(`Warning: ${validatorReturn}`);\n\t\t\t}\n\t\t\treturn validatorReturn;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks if the it's allowed to write on the requested state key.\n\t * @param {string} name The name of the key.\n\t * @return {boolean}\n\t */\n\tcanSetState(name) {\n\t\tvar info = this.stateInfo_[name];\n\t\treturn !info.config.writeOnce || !info.written;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tthis.stateInfo_ = null;\n\t\tthis.scheduledBatchData_ = null;\n\t}\n\n\t/**\n\t * Emits the state change batch event.\n\t * @protected\n\t */\n\temitBatchEvent_() {\n\t\tif (!this.isDisposed()) {\n\t\t\tvar data = this.scheduledBatchData_;\n\t\t\tthis.scheduledBatchData_ = null;\n\t\t\tthis.emit('stateChanged', data);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the value of the requested state key.\n\t * Note: this can and should be accomplished by accessing the value as a\n\t * regular property. This should only be used in cases where a function is\n\t * actually needed.\n\t * @param {string} name\n\t * @return {*}\n\t */\n\tget(name) {\n\t\treturn this.obj_[name];\n\t}\n\n\t/**\n\t * Returns an object that maps state keys to their values.\n\t * @param {Array<string>=} opt_names A list of names of the keys that should\n\t *   be returned. If none is given, the whole state will be returned.\n\t * @return {Object.<string, *>}\n\t */\n\tgetState(opt_names) {\n\t\tvar state = {};\n\t\tvar names = opt_names || this.getStateKeys();\n\n\t\tfor (var i = 0; i < names.length; i++) {\n\t\t\tstate[names[i]] = this.get(names[i]);\n\t\t}\n\n\t\treturn state;\n\t}\n\n\t/**\n\t * Gets the config object for the requested state key.\n\t * @param {string} name The key's name.\n\t * @return {Object}\n\t * @protected\n\t */\n\tgetStateKeyConfig(name) {\n\t\treturn (this.stateInfo_[name] || {}).config;\n\t}\n\n\t/**\n\t * Returns an array with all state keys.\n\t * @return {!Array.<string>}\n\t */\n\tgetStateKeys() {\n\t\treturn this.stateInfo_ ? Object.keys(this.stateInfo_) : [];\n\t}\n\n\t/**\n\t * Gets the value of the specified state key. This is passed as that key's\n\t * getter to the `Object.defineProperty` call inside the `addKeyToState` method.\n\t * @param {string} name The name of the key.\n\t * @return {*}\n\t * @protected\n\t */\n\tgetStateKeyValue_(name) {\n\t\tif (!this.warnIfDisposed_(name)) {\n\t\t\tthis.initStateKey_(name);\n\t\t\treturn this.stateInfo_[name].value;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the value of the state key with the given name has already been\n\t * set. Note that this doesn't run the key's getter.\n\t * @param {string} name The name of the key.\n\t * @return {boolean}\n\t */\n\thasBeenSet(name) {\n\t\tvar info = this.stateInfo_[name];\n\t\treturn info.state === State.KeyStates.INITIALIZED ||\n\t\t\tthis.hasInitialValue_(name);\n\t}\n\n\t/**\n\t * Checks if an initial value was given to the specified state property.\n\t * @param {string} name The name of the key.\n\t * @return {boolean}\n\t * @protected\n\t */\n\thasInitialValue_(name) {\n\t\treturn this.stateInfo_[name].hasOwnProperty('initialValue');\n\t}\n\n\t/**\n\t * Checks if the given key is present in this instance's state.\n\t * @param {string} key\n\t * @return {boolean}\n\t */\n\thasStateKey(key) {\n\t\tif (!this.warnIfDisposed_(key)) {\n\t\t\treturn !!this.stateInfo_[key];\n\t\t}\n\t}\n\n\t/**\n\t * Informs of changes to a state key's value through an event. Won't trigger\n\t * the event if the value hasn't changed or if it's being initialized.\n\t * @param {string} name The name of the key.\n\t * @param {*} prevVal The previous value of the key.\n\t * @protected\n\t */\n\tinformChange_(name, prevVal) {\n\t\tif (this.shouldInformChange_(name, prevVal)) {\n\t\t\tvar data = {\n\t\t\t\tkey: name,\n\t\t\t\tnewVal: this.get(name),\n\t\t\t\tprevVal: prevVal\n\t\t\t};\n\t\t\tthis.emit(name + 'Changed', data);\n\t\t\tthis.emit('stateKeyChanged', data);\n\t\t\tthis.scheduleBatchEvent_(data);\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the specified state key, giving it a first value.\n\t * @param {string} name The name of the key.\n\t * @protected\n\t */\n\tinitStateKey_(name) {\n\t\tvar info = this.stateInfo_[name];\n\t\tif (info.state !== State.KeyStates.UNINITIALIZED) {\n\t\t\treturn;\n\t\t}\n\n\t\tinfo.state = State.KeyStates.INITIALIZING;\n\t\tthis.setInitialValue_(name);\n\t\tif (!info.written) {\n\t\t\tthis.setDefaultValue(name);\n\t\t}\n\t\tinfo.state = State.KeyStates.INITIALIZED;\n\t}\n\n\t/**\n\t * Merges an array of values for the STATE property into a single object.\n\t * @param {!Array} values The values to be merged.\n\t * @return {!Object} The merged value.\n\t * @static\n\t */\n\tstatic mergeState(values) {\n\t\treturn object.mixin.apply(null, [{}].concat(values.reverse()));\n\t}\n\n\t/**\n\t * Merges the STATE static variable for the given constructor function.\n\t * @param  {!Function} ctor Constructor function.\n\t * @return {boolean} Returns true if merge happens, false otherwise.\n\t * @static\n\t */\n\tstatic mergeStateStatic(ctor) {\n\t\treturn mergeSuperClassesProperty(ctor, 'STATE', State.mergeState);\n\t}\n\n\t/**\n\t * Merges the values of the `INVALID_KEYS` static for the whole hierarchy of\n\t * the current instance.\n\t * @protected\n\t */\n\tmergeInvalidKeys_() {\n\t\tmergeSuperClassesProperty(this.constructor, 'INVALID_KEYS', function(values) {\n\t\t\treturn array.flatten(values).reduce(function(merged, val) {\n\t\t\t\tif (val) {\n\t\t\t\t\tmerged[val] = true;\n\t\t\t\t}\n\t\t\t\treturn merged;\n\t\t\t}, {});\n\t\t});\n\t}\n\n\t/**\n\t * Removes the requested state key.\n\t * @param {string} name The name of the key.\n\t */\n\tremoveStateKey(name) {\n\t\tthis.stateInfo_[name] = null;\n\t\tdelete this.obj_[name];\n\t}\n\n\t/**\n\t * Schedules a state change batch event to be emitted asynchronously.\n\t * @param {!Object} changeData Information about a state key's update.\n\t * @protected\n\t */\n\tscheduleBatchEvent_(changeData) {\n\t\tif (!this.scheduledBatchData_) {\n\t\t\tasync.nextTick(this.emitBatchEvent_, this);\n\t\t\tthis.scheduledBatchData_ = {\n\t\t\t\tchanges: {}\n\t\t\t};\n\t\t}\n\n\t\tvar name = changeData.key;\n\t\tvar changes = this.scheduledBatchData_.changes;\n\t\tif (changes[name]) {\n\t\t\tchanges[name].newVal = changeData.newVal;\n\t\t} else {\n\t\t\tchanges[name] = changeData;\n\t\t}\n\t}\n\n\t/**\n\t * Sets the value of the requested state key.\n\t * Note: this can and should be accomplished by setting the state key as a\n\t * regular property. This should only be used in cases where a function is\n\t * actually needed.\n\t * @param {string} name\n\t * @param {*} value\n\t * @return {*}\n\t */\n\tset(name, value) {\n\t\tif (this.hasStateKey(name)) {\n\t\t\tthis.obj_[name] = value;\n\t\t}\n\t}\n\n\t/**\n\t * Sets the default value of the requested state key.\n\t * @param {string} name The name of the key.\n\t * @return {*}\n\t */\n\tsetDefaultValue(name) {\n\t\tvar config = this.stateInfo_[name].config;\n\n\t\tif (config.value !== undefined) {\n\t\t\tthis.set(name, config.value);\n\t\t} else {\n\t\t\tthis.set(name, this.callFunction_(config.valueFn));\n\t\t}\n\t}\n\n\t/**\n\t * Sets the initial value of the requested state key.\n\t * @param {string} name The name of the key.\n\t * @return {*}\n\t * @protected\n\t */\n\tsetInitialValue_(name) {\n\t\tif (this.hasInitialValue_(name)) {\n\t\t\tvar info = this.stateInfo_[name];\n\t\t\tthis.set(name, info.initialValue);\n\t\t\tinfo.initialValue = undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Sets a map of keys that are not valid state keys.\n\t * @param {!Object<string, boolean>}\n\t */\n\tsetKeysBlacklist_(blacklist) {\n\t\tthis.keysBlacklist_ = blacklist;\n\t}\n\n\t/**\n\t * Sets the value of all the specified state keys.\n\t * @param {!Object.<string,*>} values A map of state keys to the values they\n\t *   should be set to.\n\t * @param {function()=} opt_callback An optional function that will be run\n\t *   after the next batched update is triggered.\n\t */\n\tsetState(values, opt_callback) {\n\t\tObject.keys(values).forEach(name => this.set(name, values[name]));\n\t\tif (opt_callback && this.scheduledBatchData_) {\n\t\t\tthis.once('stateChanged', opt_callback);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the value of the specified state key. This is passed as that key's\n\t * setter to the `Object.defineProperty` call inside the `addKeyToState`\n\t * method.\n\t * @param {string} name The name of the key.\n\t * @param {*} value The new value of the key.\n\t * @protected\n\t */\n\tsetStateKeyValue_(name, value) {\n\t\tif (this.warnIfDisposed_(name) ||\n\t\t\t!this.canSetState(name) ||\n\t\t\t!this.validateKeyValue_(name, value)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar info = this.stateInfo_[name];\n\t\tif (!this.hasInitialValue_(name) && info.state === State.KeyStates.UNINITIALIZED) {\n\t\t\tinfo.state = State.KeyStates.INITIALIZED;\n\t\t}\n\n\t\tvar prevVal = this.get(name);\n\t\tinfo.value = this.callSetter_(name, value, prevVal);\n\t\tthis.assertGivenIfRequired_(name);\n\t\tinfo.written = true;\n\t\tthis.informChange_(name, prevVal);\n\t}\n\n\t/**\n\t * Checks if we should inform about a state update. Updates are ignored during\n\t * state initialization. Otherwise, updates to primitive values are only\n\t * informed when the new value is different from the previous one. Updates to\n\t * objects (which includes functions and arrays) are always informed outside\n\t * initialization though, since we can't be sure if all of the internal data\n\t * has stayed the same.\n\t * @param {string} name The name of the key.\n\t * @param {*} prevVal The previous value of the key.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tshouldInformChange_(name, prevVal) {\n\t\tvar info = this.stateInfo_[name];\n\t\treturn (info.state === State.KeyStates.INITIALIZED) &&\n\t\t\t(isObject(prevVal) || prevVal !== this.get(name));\n\t}\n\n\t/**\n\t * Validates the initial value for the state property with the given name.\n\t * @param {string} name\n\t * @protected\n\t */\n\tvalidateInitialValue_(name) {\n\t\tvar info = this.stateInfo_[name];\n\t\tif (this.hasInitialValue_(name) && !this.callValidator_(name, info.initialValue)) {\n\t\t\tdelete info.initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Validates the state key's value, which includes calling the validator\n\t * defined in the key's configuration object, if there is one.\n\t * @param {string} name The name of the key.\n\t * @param {*} value The value to be validated.\n\t * @return {boolean} Flag indicating if value is valid or not.\n\t * @protected\n\t */\n\tvalidateKeyValue_(name, value) {\n\t\tvar info = this.stateInfo_[name];\n\n\t\treturn info.state === State.KeyStates.INITIALIZING ||\n\t\t\tthis.callValidator_(name, value);\n\t}\n\n\t/**\n\t * Warns if this instance has already been disposed.\n\t * @param {string} name Name of the property to be accessed if not disposed.\n\t * @return {boolean} True if disposed, or false otherwise.\n\t * @protected\n\t */\n\twarnIfDisposed_(name) {\n\t\tconst disposed = this.isDisposed();\n\t\tif (disposed) {\n\t\t\tconsole.warn(\n\t\t\t\t`Error. Trying to access property \"${name}\" on disposed instance`\n\t\t\t);\n\t\t}\n\t\treturn disposed;\n\t}\n}\n\n/**\n * A list with state key names that will automatically be rejected as invalid.\n * Subclasses can define their own invalid keys by setting this static on their\n * constructors, which will be merged together and handled automatically.\n * @type {!Array<string>}\n */\nState.INVALID_KEYS = ['state', 'stateKey'];\n\n/**\n * Constants that represent the states that a state key can be in.\n * @type {!Object}\n */\nState.KeyStates = {\n\tUNINITIALIZED: 0,\n\tINITIALIZING: 1,\n\tINITIALIZED: 2\n};\n\nexport default State;\n"],"sourceRoot":"/source/"}
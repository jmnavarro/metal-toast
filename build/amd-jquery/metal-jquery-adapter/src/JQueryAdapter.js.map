{"version":3,"sources":["JQueryAdapter.js"],"names":["JQueryAdapter","register","name","Ctor","$","Error","fn","configOrMethodName","args","Array","prototype","slice","call","arguments","handlePluginCall","callMethod","element","methodName","fullName","getPluginFullName","instance","data","isValidMethod","apply","createOrUpdateInstance","config","extend","setState","on","onMetalEvent","bind","collection","each","length","eventType","eventData","trigger"],"mappings":"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","file":"node_modules/gulp-metal/node_modules/metal-jquery-adapter/src/JQueryAdapter.js","sourcesContent":["'use strict';\n\n/**\n * Acts as a bridge between Metal.js and jQuery, allowing Metal.js components to\n * be used as jQuery plugins.\n * @type {!Object}\n */\nvar JQueryAdapter = {\n\t/**\n\t * Registers a Metal.js component as a jQuery plugin with the given name.\n\t * @param {string} name The name of the plugin that should be registered.\n\t * @param {!Function(Object)} Ctor The constructor of the Metal.js component.\n\t */\n\tregister(name, Ctor) {\n\t\tif (!$) {\n\t\t\tthrow new Error('jQuery needs to be included in the page for JQueryAdapter to work.');\n\t\t}\n\t\tif (typeof name !== 'string') {\n\t\t\tthrow new Error('The name string is required for registering a plugin');\n\t\t}\n\t\tif (typeof Ctor !== 'function') {\n\t\t\tthrow new Error('The constructor function is required for registering a plugin');\n\t\t}\n\n\t\t$.fn[name] = function(configOrMethodName) {\n\t\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\t\treturn handlePluginCall(name, Ctor, this, configOrMethodName, args);\n\t\t};\n\t}\n};\n\n/**\n * Calls a method on the plugin instance for the given element.\n * @param {string} name The name of the plugin.\n * @param {!jQuery} element A jQuery collection with a single element.\n * @param {string} methodName The name of the method to be called.\n * @param {Array} args The arguments to call the method with.\n * @return {*} The return value of the called method.\n */\nfunction callMethod(name, element, methodName, args) {\n\tvar fullName = getPluginFullName(name);\n\tvar instance = element.data(fullName);\n\tif (!instance) {\n\t\tthrow new Error('Tried to call method ' + methodName + ' on ' + name + ' plugin' +\n\t\t\t'without initialing it first.');\n\t}\n\tif (!isValidMethod(instance, methodName)) {\n\t\tthrow new Error('Plugin ' + name + ' has no method called ' + methodName);\n\t}\n\treturn instance[methodName].apply(instance, args);\n}\n\n/**\n * Creates an instace of a component for the given element, or updates it if one\n * already exists.\n * @param {string} name The name of the plugin.\n * @param {!Function(Object)} Ctor The constructor of the Metal.js component.\n * @param {!jQuery} element A jQuery collection with a single element.\n * @param {Object} config A config object to be passed to the component instance.\n */\nfunction createOrUpdateInstance(name, Ctor, element, config) {\n\tvar fullName = getPluginFullName(name);\n\tvar instance = element.data(fullName);\n\tconfig = $.extend({}, config, {\n\t\telement: element[0]\n\t});\n\tif (instance) {\n\t\tinstance.setState(config);\n\t} else {\n\t\tinstance = new Ctor(config);\n\t\tinstance.on('*', onMetalEvent.bind(null, name, element));\n\t\telement.data(fullName, instance);\n\t}\n}\n\n/**\n * Gets the full name of the given plugin, by appending a prefix to it.\n * @param {string} name The name of the plugin.\n * @return {string}\n */\nfunction getPluginFullName(name) {\n\treturn 'metal-' + name;\n}\n\n/**\n * Handles calls to a registered plugin.\n * @param {string} name The name of the plugin.\n * @param {!Function(Object)} Ctor The constructor of the Metal.js component.\n * @param {!jQuery} collection A jQuery collection of elements to handle the plugin for.\n * @param {?(string|Object)} configOrMethodName If this is a string, a method with\n * that name will be called on the appropriate component instance. Otherwise, an\n * the instance (which will be created if it doesn't yet exist) will receive this\n * as its config object.\n * @param {Array} args All other arguments that were passed to the plugin call.\n */\nfunction handlePluginCall(name, Ctor, collection, configOrMethodName, args) {\n\tif (typeof configOrMethodName === 'string') {\n\t\treturn callMethod(name, $(collection[0]), configOrMethodName, args);\n\t} else {\n\t\tcollection.each(function() {\n\t\t\tcreateOrUpdateInstance(name, Ctor, $(this), configOrMethodName);\n\t\t});\n\t}\n\treturn collection;\n}\n\n/**\n * Checks if the given method is valid. A method is valid if it exists and isn't\n * private.\n * @param {!Object} instance The instance to check for the method.\n * @param {string} methodName The name of the method to check.\n * @return {boolean}\n */\nfunction isValidMethod(instance, methodName) {\n\treturn typeof instance[methodName] === 'function' &&\n\t\tmethodName[0] !== '_' &&\n\t\tmethodName[methodName.length - 1] !== '_';\n}\n\n/**\n * Called when an event is triggered on a Metal component that has been registered\n * as a jQuery plugin. Triggers a similar event on the jQuery element tied to the\n * plugin.\n * @param {string} name The name of the plugin.\n * @param {!jQuery} element A jQuery collection with a single element.\n * @param {string} eventType The name of the Metal.js event type.\n * @param {*} eventData Event data that was passed to the listener of the Metal.js\n *   event.\n */\nfunction onMetalEvent(name, element, eventType, eventData) {\n\tvar fullName = getPluginFullName(name);\n\telement.trigger(fullName + ':' + eventType, eventData);\n}\n\nexport default JQueryAdapter;\n"],"sourceRoot":"/source/"}
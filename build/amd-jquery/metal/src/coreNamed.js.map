{"version":3,"sources":["coreNamed.js"],"names":["abstractMethod","collectSuperClassesProperty","disableCompatibilityMode","enableCompatibilityMode","getCompatibilityModeData","getFunctionName","getUid","identityFunction","isBoolean","isDef","isDefAndNotNull","isDocument","isElement","isFunction","isNull","isNumber","isWindow","isObject","isPromise","isString","mergeSuperClassesProperty","nullFunction","compatibilityModeData_","uniqueIdCounter_","UID_PROPERTY","Math","random","Error","constructor","propertyName","propertyValues","__proto__","isPrototypeOf","Function","push","opt_data","window","__METAL_COMPATIBILITY__","fn","name","str","toString","substring","indexOf","opt_object","opt_noInheritance","id","hasOwnProperty","opt_returnValue","val","undefined","nodeType","type","then","String","opt_mergeFn","mergedName","merged"],"mappings":"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","file":"node_modules/metal/src/coreNamed.js","sourcesContent":["'use strict';\n\n/**\n * A collection of core utility functions.\n * @const\n */\n\nlet compatibilityModeData_;\n\n/**\n * Counter for unique id.\n * @type {Number}\n * @private\n */\nlet uniqueIdCounter_ = 1;\n\n/**\n * Unique id property prefix.\n * @type {String}\n * @protected\n */\nexport const UID_PROPERTY = 'core_' + ((Math.random() * 1e9) >>> 0);\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function abstractMethod() {\n\tthrow Error('Unimplemented abstract method');\n}\n\n/**\n * Loops constructor super classes collecting its properties values. If\n * property is not available on the super class `undefined` will be\n * collected as value for the class hierarchy position.\n * @param {!function()} constructor Class constructor.\n * @param {string} propertyName Property name to be collected.\n * @return {Array.<*>} Array of collected values.\n * TODO(*): Rethink superclass loop.\n */\nexport function collectSuperClassesProperty(constructor, propertyName) {\n\tvar propertyValues = [constructor[propertyName]];\n\twhile (constructor.__proto__ && !constructor.__proto__.isPrototypeOf(Function)) {\n\t\tconstructor = constructor.__proto__;\n\t\tpropertyValues.push(constructor[propertyName]);\n\t}\n\treturn propertyValues;\n}\n\n/**\n * Disables Metal.js's compatibility mode.\n */\nexport function disableCompatibilityMode() {\n\tcompatibilityModeData_ = null;\n}\n\n/**\n * Enables Metal.js's compatibility mode with the following features from rc\n * and 1.x versions:\n *     - Using \"key\" to reference component instances. In the current version\n *       this should be done via \"ref\" instead. This allows old code still\n *       using \"key\" to keep working like before. NOTE: this may cause\n *       problems, since \"key\" is meant to be used differently. Only use this\n *       if it's not possible to upgrade the code to use \"ref\" instead.\n * @param {Object=} opt_data Optional object with data to specify more\n *     details, such as:\n *         - renderers {Array} the template renderers that should be in\n *           compatibility mode, either their constructors or strings\n *           representing them (e.g. 'soy' or 'jsx'). By default, all the ones\n *           that extend from IncrementalDomRenderer.\n * @type {Object}\n */\nexport function enableCompatibilityMode(opt_data = {}) {\n\tcompatibilityModeData_ = opt_data;\n}\n\n/**\n * Returns the data used for compatibility mode, or nothing if it hasn't been\n * enabled.\n * @return {Object}\n */\nexport function getCompatibilityModeData() {\n\t// Compatibility mode can be set via the __METAL_COMPATIBILITY__ global var.\n\tif (!compatibilityModeData_) {\n\t\tif (typeof window !== 'undefined' && window.__METAL_COMPATIBILITY__) {\n\t\t\tenableCompatibilityMode(window.__METAL_COMPATIBILITY__);\n\t\t}\n\t}\n\treturn compatibilityModeData_;\n}\n\n/**\n * Gets the name of the given function. If the current browser doesn't\n * support the `name` property, this will calculate it from the function's\n * content string.\n * @param {!function()} fn\n * @return {string}\n */\nexport function getFunctionName(fn) {\n\tif (!fn.name) {\n\t\tvar str = fn.toString();\n\t\tfn.name = str.substring(9, str.indexOf('('));\n\t}\n\treturn fn.name;\n}\n\n/**\n * Gets an unique id. If `opt_object` argument is passed, the object is\n * mutated with an unique id. Consecutive calls with the same object\n * reference won't mutate the object again, instead the current object uid\n * returns. See {@link UID_PROPERTY}.\n * @param {Object=} opt_object Optional object to be mutated with the uid. If\n *     not specified this method only returns the uid.\n * @param {boolean=} opt_noInheritance Optional flag indicating if this\n *     object's uid property can be inherited from parents or not.\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function getUid(opt_object, opt_noInheritance) {\n\tif (opt_object) {\n\t\tvar id = opt_object[UID_PROPERTY];\n\t\tif (opt_noInheritance && !opt_object.hasOwnProperty(UID_PROPERTY)) {\n\t\t\tid = null;\n\t\t}\n\t\treturn id || (opt_object[UID_PROPERTY] = uniqueIdCounter_++);\n\t}\n\treturn uniqueIdCounter_++;\n}\n\n/**\n * The identity function. Returns its first argument.\n * @param {*=} opt_returnValue The single value that will be returned.\n * @return {?} The first argument.\n */\nexport function identityFunction(opt_returnValue) {\n\treturn opt_returnValue;\n}\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\nexport function isBoolean(val) {\n\treturn typeof val === 'boolean';\n}\n\n/**\n * Returns true if the specified value is not undefined.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\nexport function isDef(val) {\n\treturn val !== undefined;\n}\n\n/**\n * Returns true if value is not undefined or null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDefAndNotNull(val) {\n\treturn isDef(val) && !isNull(val);\n}\n\n/**\n * Returns true if value is a document.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocument(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 9;\n}\n\n/**\n * Returns true if value is a dom element.\n * @param {*} val\n * @return {boolean}\n */\nexport function isElement(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 1;\n}\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\nexport function isFunction(val) {\n\treturn typeof val === 'function';\n}\n\n/**\n * Returns true if value is null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isNull(val) {\n\treturn val === null;\n}\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\nexport function isNumber(val) {\n\treturn typeof val === 'number';\n}\n\n/**\n * Returns true if value is a window.\n * @param {*} val\n * @return {boolean}\n */\nexport function isWindow(val) {\n\treturn val !== null && val === val.window;\n}\n\n/**\n * Returns true if the specified value is an object. This includes arrays\n * and functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\nexport function isObject(val) {\n\tvar type = typeof val;\n\treturn type === 'object' && val !== null || type === 'function';\n}\n\n/**\n * Returns true if value is a Promise.\n * @param {*} val\n * @return {boolean}\n */\nexport function isPromise(val) {\n\treturn val && typeof val === 'object' && typeof val.then === 'function';\n}\n\n/**\n * Returns true if value is a string.\n * @param {*} val\n * @return {boolean}\n */\nexport function isString(val) {\n\treturn typeof val === 'string' || val instanceof String;\n}\n\n/**\n * Merges the values of a export function property a class with the values of that\n * property for all its super classes, and stores it as a new static\n * property of that class. If the export function property already existed, it won't\n * be recalculated.\n * @param {!function()} constructor Class constructor.\n * @param {string} propertyName Property name to be collected.\n * @param {function(*, *):*=} opt_mergeFn Function that receives an array filled\n *   with the values of the property for the current class and all its super classes.\n *   Should return the merged value to be stored on the current class.\n * @return {boolean} Returns true if merge happens, false otherwise.\n */\nexport function mergeSuperClassesProperty(constructor, propertyName, opt_mergeFn) {\n\tvar mergedName = propertyName + '_MERGED';\n\tif (constructor.hasOwnProperty(mergedName)) {\n\t\treturn false;\n\t}\n\n\tvar merged = collectSuperClassesProperty(constructor, propertyName);\n\tif (opt_mergeFn) {\n\t\tmerged = opt_mergeFn(merged);\n\t}\n\tconstructor[mergedName] = merged;\n\treturn true;\n}\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\nexport function nullFunction() {}\n"],"sourceRoot":"/source/"}
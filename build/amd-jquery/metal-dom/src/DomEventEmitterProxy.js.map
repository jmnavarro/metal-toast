{"version":3,"sources":["DomEventEmitterProxy.js"],"names":["DomEventEmitterProxy","event","listener","originEmitter_","addEventListener","isDelegateEvent_","index","indexOf","eventName","substring","selector","delegate","on","substr","supportsEvent","isSupportedDomEvent_"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAUMA,oB;;;;;;;;;;;gCASQC,K,EAAOC,Q,EAAU;AAC7B,QAAI,KAAKC,cAAL,CAAoBC,gBAAxB,EAA0C;AACzC,SAAI,KAAKC,gBAAL,CAAsBJ,KAAtB,CAAJ,EAAkC;AACjC,UAAIK,QAAQL,MAAMM,OAAN,CAAc,GAAd,EAAmB,CAAnB,CAAZ;AACA,UAAIC,YAAYP,MAAMQ,SAAN,CAAgB,CAAhB,EAAmBH,KAAnB,CAAhB;AACA,UAAII,WAAWT,MAAMQ,SAAN,CAAgBH,QAAQ,CAAxB,CAAf;AACA,aAAO,cAAIK,QAAJ,CAAa,KAAKR,cAAlB,EAAkCK,SAAlC,EAA6CE,QAA7C,EAAuDR,QAAvD,CAAP;AACA,MALD,MAKO;AACN,aAAO,cAAIU,EAAJ,CAAO,KAAKT,cAAZ,EAA4BF,KAA5B,EAAmCC,QAAnC,CAAP;AACA;AACD,KATD,MASO;AACN,qJAA0BD,KAA1B,EAAiCC,QAAjC;AACA;AACD;;;oCAQgBD,K,EAAO;AACvB,WAAOA,MAAMY,MAAN,CAAa,CAAb,EAAgB,CAAhB,MAAuB,WAA9B;AACA;;;wCAOoBZ,K,EAAO;AAC3B,QAAI,CAAC,KAAKE,cAAN,IAAwB,CAAC,KAAKA,cAAL,CAAoBC,gBAAjD,EAAmE;AAClE,YAAO,IAAP;AACA;AACD,WAAQ,KAAKC,gBAAL,CAAsBJ,KAAtB,KAAgCA,MAAMM,OAAN,CAAc,GAAd,EAAmB,CAAnB,MAA0B,CAAC,CAA5D,IACN,cAAIO,aAAJ,CAAkB,KAAKX,cAAvB,EAAuCF,KAAvC,CADD;AAEA;;;qCASiBA,K,EAAO;AACxB,WAAO,8IAAwBA,KAAxB,KAAkC,KAAKc,oBAAL,CAA0Bd,KAA1B,CAAzC;AACA;;;;;;mBAGaD,oB","file":"node_modules/metal-dom/src/DomEventEmitterProxy.js","sourcesContent":["'use strict';\n\nimport dom from './dom';\nimport { EventEmitterProxy } from 'metal-events';\n\n/**\n * DomEventEmitterProxy utility. It extends `EventEmitterProxy` to also accept\n * dom elements as origin emitters.\n * @extends {EventEmitterProxy}\n */\nclass DomEventEmitterProxy extends EventEmitterProxy {\n\t/**\n\t * Adds the given listener for the given event.\n\t * @param {string} event.\n\t * @param {!function()} listener\n\t * @return {!EventHandle} The listened event's handle.\n\t * @protected\n\t * @override\n\t */\n\taddListener_(event, listener) {\n\t\tif (this.originEmitter_.addEventListener) {\n\t\t\tif (this.isDelegateEvent_(event)) {\n\t\t\t\tvar index = event.indexOf(':', 9);\n\t\t\t\tvar eventName = event.substring(9, index);\n\t\t\t\tvar selector = event.substring(index + 1);\n\t\t\t\treturn dom.delegate(this.originEmitter_, eventName, selector, listener);\n\t\t\t} else {\n\t\t\t\treturn dom.on(this.originEmitter_, event, listener);\n\t\t\t}\n\t\t} else {\n\t\t\treturn super.addListener_(event, listener);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event is of the delegate type.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisDelegateEvent_(event) {\n\t\treturn event.substr(0, 9) === 'delegate:';\n\t}\n\n\t/**\n\t * Checks if the given event is supported by the origin element.\n\t * @param {string} event\n\t * @protected\n\t */\n\tisSupportedDomEvent_(event) {\n\t\tif (!this.originEmitter_ || !this.originEmitter_.addEventListener) {\n\t\t\treturn true;\n\t\t}\n\t\treturn (this.isDelegateEvent_(event) && event.indexOf(':', 9) !== -1) ||\n\t\t\tdom.supportsEvent(this.originEmitter_, event);\n\t}\n\n\t/**\n\t * Checks if the given event should be proxied.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t * @override\n\t */\n\tshouldProxyEvent_(event) {\n\t\treturn super.shouldProxyEvent_(event) && this.isSupportedDomEvent_(event);\n\t}\n}\n\nexport default DomEventEmitterProxy;\n"],"sourceRoot":"/source/"}
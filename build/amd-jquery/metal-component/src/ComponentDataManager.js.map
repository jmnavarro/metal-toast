{"version":3,"sources":["ComponentDataManager.js"],"names":["ComponentDataManager","component","data","component_","constructor","firstDefinedValue","mergeStateStatic","createState_","state_","addToState","arguments","mixin","STATE_MERGED","holder","state","setKeysBlacklist_","BLACKLIST_MERGED","buildStateInstanceData_","getInitialConfig","listener","emit_","bind","on","proxy_","dispose","event","orig","type","name","emit","get","getStateKeys","getState","replaceNonInternal","opt_callback","setState","keys","i","length","key","getStateKeyConfig","internal","hasOwnProperty","set","setDefaultValue","BLACKLIST","components","context","element","refs","wasRendered"],"mappings":"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","file":"node_modules/metal-component/src/ComponentDataManager.js","sourcesContent":["'use strict';\n\nimport { array, mergeSuperClassesProperty, object } from 'metal';\nimport { EventEmitter, EventEmitterProxy } from 'metal-events';\nimport State from 'metal-state';\n\nclass ComponentDataManager extends EventEmitter {\n\t/**\n\t * Constructor for `ComponentDataManager`.\n\t * @param {!Component} component\n\t * @param {!Object} data\n\t */\n\tconstructor(component, data) {\n\t\tsuper();\n\t\tthis.component_ = component;\n\n\t\tmergeSuperClassesProperty(\n\t\t\tthis.constructor,\n\t\t\t'BLACKLIST',\n\t\t\tarray.firstDefinedValue\n\t\t);\n\t\tState.mergeStateStatic(this.component_.constructor);\n\n\t\tthis.createState_(data, this.component_);\n\t}\n\n\t/**\n\t * Adds a state property to the component.\n\t * @param {string} name\n\t * @param {!Object} config\n\t * @param {*} opt_initialValue\n\t */\n\tadd() {\n\t\tthis.state_.addToState(...arguments);\n\t}\n\n\t/**\n\t * Builds the configuration data that will be passed to the `State` instance.\n\t * @param {!Object} data\n\t * @return {!Object}\n\t * @protected\n\t */\n\tbuildStateInstanceData_(data) {\n\t\treturn object.mixin({}, data, this.component_.constructor.STATE_MERGED);\n\t}\n\n\t/**\n\t * Creates the `State` instance that will handle the main component data.\n\t * @param {!Object} data\n\t * @param {!Object} holder The object that should hold the data properties.\n\t * @protected\n\t */\n\tcreateState_(data, holder) {\n\t\tconst state = new State({}, holder, this.component_);\n\t\tstate.setKeysBlacklist_(this.constructor.BLACKLIST_MERGED);\n\t\tstate.addToState(\n\t\t\tthis.buildStateInstanceData_(data),\n\t\t\tthis.component_.getInitialConfig()\n\t\t);\n\n\t\tconst listener = this.emit_.bind(this);\n\t\tstate.on('stateChanged', listener);\n\t\tstate.on('stateKeyChanged', listener);\n\t\tthis.state_ = state;\n\n\t\tthis.proxy_ = new EventEmitterProxy(state, this.component_);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\n\t\tthis.state_.dispose();\n\t\tthis.state_ = null;\n\n\t\tthis.proxy_.dispose();\n\t\tthis.proxy_ = null;\n\t}\n\n\t/**\n\t * Emits the specified event.\n\t * @param {!Object} data\n\t * @param {!Object} event\n\t * @protected\n\t */\n\temit_(data, event) {\n\t\tconst orig = event.type;\n\t\tconst name = orig === 'stateChanged' ? 'dataChanged' : 'dataPropChanged';\n\t\tthis.emit(name, data);\n\t}\n\n\t/**\n\t * Gets the data with the given name.\n\t * @param {string} name\n\t * @return {*}\n\t */\n\tget(name) {\n\t\treturn this.state_.get(name);\n\t}\n\n\t/**\n\t * Gets the keys for state data that can be synced via `sync` functions.\n\t * @return {!Array<string>}\n\t */\n\tgetSyncKeys() {\n\t\treturn this.state_.getStateKeys();\n\t}\n\n\t/**\n\t * Gets the keys for state data.\n\t * @return {!Array<string>}\n\t */\n\tgetStateKeys() {\n\t\treturn this.state_.getStateKeys();\n\t}\n\n\t/**\n\t * Gets the whole state data.\n\t * @return {!Object}\n\t */\n\tgetState() {\n\t\treturn this.state_.getState();\n\t}\n\n\t/**\n\t * Gets the `State` instance being used.\n\t * @return {!Object}\n\t */\n\tgetStateInstance() {\n\t\treturn this.state_;\n\t}\n\n\t/**\n\t * Updates all non internal data with the given values (or to the default\n\t * value if none is given).\n\t * @param {!Object} data\n\t */\n\treplaceNonInternal(data) {\n\t\tComponentDataManager.replaceNonInternal(data, this.state_);\n\t}\n\n\t/**\n\t * Updates all non internal data with the given values (or to the default\n\t * value if none is given).\n\t * @param {!Object} data\n\t * @param {!State} state\n\t */\n\tstatic replaceNonInternal(data, state) {\n\t\tconst keys = state.getStateKeys();\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst key = keys[i];\n\t\t\tif (!state.getStateKeyConfig(key).internal) {\n\t\t\t\tif (data.hasOwnProperty(key)) {\n\t\t\t\t\tstate.set(key, data[key]);\n\t\t\t\t} else {\n\t\t\t\t\tstate.setDefaultValue(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the value of all the specified state keys.\n\t * @param {!Object.<string,*>} values A map of state keys to the values they\n\t *   should be set to.\n\t * @param {function()=} opt_callback An optional function that will be run\n\t *   after the next batched update is triggered.\n\t */\n\tsetState(state, opt_callback) {\n\t\tthis.state_.setState(state, opt_callback);\n\t}\n}\n\nComponentDataManager.BLACKLIST = {\n\tcomponents: true,\n\tcontext: true,\n\telement: true,\n\trefs: true,\n\twasRendered: true\n};\n\nexport default ComponentDataManager;\n"],"sourceRoot":"/source/"}
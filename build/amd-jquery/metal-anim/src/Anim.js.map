{"version":3,"sources":["Anim.js"],"names":["Anim","element","opt_durationMs","getComputedDurationMs","emulateEnd_","type","duration","isDef","delayed","setTimeout","triggerEvent","checkAnimationEventName","abort","clearTimeout","hoistedEvtHandler","removeListener","once","parseFloat","window","getComputedStyle","getPropertyValue"],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAKMA,I;;;;;;;8BASaC,O,EAASC,c,EAAgB;AAC1C,QAAI,KAAKC,qBAAL,CAA2BF,OAA3B,EAAoC,WAApC,IAAmD,KAAKE,qBAAL,CAA2BF,OAA3B,EAAoC,YAApC,CAAvD,EAA0G;AACzG,YAAO,KAAKG,WAAL,CAAiBH,OAAjB,EAA0B,WAA1B,EAAuCC,cAAvC,CAAP;AACA,KAFD,MAEO;AACN,YAAO,KAAKE,WAAL,CAAiBH,OAAjB,EAA0B,YAA1B,EAAwCC,cAAxC,CAAP;AACA;AACD;;;uCAS0BD,O,EAASC,c,EAAgB;AACnD,WAAO,KAAKE,WAAL,CAAiBH,OAAjB,EAA0B,WAA1B,EAAuCC,cAAvC,CAAP;AACA;;;wCAS2BD,O,EAASC,c,EAAgB;AACpD,SAAKE,WAAL,CAAiBH,OAAjB,EAA0B,YAA1B,EAAwCC,cAAxC;AACA;;;+BAUkBD,O,EAASI,I,EAAMH,c,EAAgB;AACjD,QAAII,WAAWJ,cAAf;AACA,QAAI,CAAC,gBAAKK,KAAL,CAAWL,cAAX,CAAL,EAAiC;AAChCI,gBAAW,KAAKH,qBAAL,CAA2BF,OAA3B,EAAoCI,IAApC,CAAX;AACA;;AAED,QAAIG,UAAUC,WAAW,YAAW;AACnC,cAAIC,YAAJ,CAAiBT,OAAjB,EAA0B,cAASU,uBAAT,GAAmCN,IAAnC,CAA1B;AACA,KAFa,EAEXC,QAFW,CAAd;;AAIA,QAAIM,QAAQ,SAARA,KAAQ,GAAW;AACtBC,kBAAaL,OAAb;AACAM,uBAAkBC,cAAlB;AACA,KAHD;AAIA,QAAID,oBAAoB,SAAIE,IAAJ,CAASf,OAAT,EAAkBI,OAAO,KAAzB,EAAgCO,KAAhC,CAAxB;;AAEA,WAAO;AACNA,YAAOA;AADD,KAAP;AAGA;;;yCAQ4BX,O,EAASI,I,EAAM;AAC3C,WAAO,CAACY,WAAWC,OAAOC,gBAAP,CAAwBlB,OAAxB,EAAiC,IAAjC,EAAuCmB,gBAAvC,CAAwDf,OAAO,WAA/D,CAAX,KAA2F,CAA5F,IAAiG,IAAxG;AACA;;;;;;mBAGaL,I","file":"node_modules/metal-anim/src/Anim.js","sourcesContent":["'use strict';\n\nimport core from 'metal';\nimport { dom, features } from 'metal-dom';\n\nclass Anim {\n\t/**\n\t * Emulates animation or transition end event, the end event with longer\n\t * duration will be used by the emulation. If they have the same value,\n\t * transitionend will be emulated.\n\t * @param {!Element} element\n\t * @param {number=} opt_durationMs\n\t * @return {!Object} Object containing `abort` function.\n\t */\n\tstatic emulateEnd(element, opt_durationMs) {\n\t\tif (this.getComputedDurationMs(element, 'animation') > this.getComputedDurationMs(element, 'transition')) {\n\t\t\treturn this.emulateEnd_(element, 'animation', opt_durationMs);\n\t\t} else {\n\t\t\treturn this.emulateEnd_(element, 'transition', opt_durationMs);\n\t\t}\n\t}\n\n\t/**\n\t * Emulates animation end event. If `opt_durationMs` not specified the value\n\t * will read from computed style for animation-duration.\n\t * @param {!Element} element\n\t * @param {number=} opt_durationMs\n\t * @return {!Object} Object containing `abort` function.\n\t */\n\tstatic emulateAnimationEnd(element, opt_durationMs) {\n\t\treturn this.emulateEnd_(element, 'animation', opt_durationMs);\n\t}\n\n\t/**\n\t * Emulates transition end event. If `opt_durationMs` not specified the\n\t * value will read from computed style for transition-duration.\n\t * @param {!Element} element\n\t * @param {number=} opt_durationMs\n\t * @return {!Object} Object containing `abort` function.\n\t */\n\tstatic emulateTransitionEnd(element, opt_durationMs) {\n\t\tthis.emulateEnd_(element, 'transition', opt_durationMs);\n\t}\n\n\t/**\n\t * Emulates transition or animation end.\n\t * @param {!Element} element\n\t * @param {string} type\n\t * @param {number=} opt_durationMs\n\t * @return {!Object} Object containing `abort` function.\n\t * @protected\n\t */\n\tstatic emulateEnd_(element, type, opt_durationMs) {\n\t\tvar duration = opt_durationMs;\n\t\tif (!core.isDef(opt_durationMs)) {\n\t\t\tduration = this.getComputedDurationMs(element, type);\n\t\t}\n\n\t\tvar delayed = setTimeout(function() {\n\t\t\tdom.triggerEvent(element, features.checkAnimationEventName()[type]);\n\t\t}, duration);\n\n\t\tvar abort = function() {\n\t\t\tclearTimeout(delayed);\n\t\t\thoistedEvtHandler.removeListener();\n\t\t};\n\t\tvar hoistedEvtHandler = dom.once(element, type + 'end', abort);\n\n\t\treturn {\n\t\t\tabort: abort\n\t\t};\n\t}\n\n\t/**\n\t * Gets computed style duration for duration.\n\t * @param {!Element} element\n\t * @param {string} type\n\t * @return {number} The computed duration in milliseconds.\n\t */\n\tstatic getComputedDurationMs(element, type) {\n\t\treturn (parseFloat(window.getComputedStyle(element, null).getPropertyValue(type + '-duration')) || 0) * 1000;\n\t}\n}\n\nexport default Anim;\n"],"sourceRoot":"/source/"}